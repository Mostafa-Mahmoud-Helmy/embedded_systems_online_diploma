
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002534  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800268c  0800268c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800268c  0800268c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800268c  0800268c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000014  080026a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080026a8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e51  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000083f  00000000  00000000  00026e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000918  00000000  00000000  000276cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00027fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00028190  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000044c  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000eff  00000000  00000000  0002872c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000058b1  00000000  00000000  0002962b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002eedc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e8  00000000  00000000  0002ef58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	0800264c 	.word	0x0800264c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	0800264c 	.word	0x0800264c

08000170 <KEYPAD_init>:


uint8 KEYPAD_row[]={R0,R1,R2,R3};
uint8 KEYPAD_col[]={C0,C1,C2,C3};

void KEYPAD_init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	uint8 i;
	GPIO_config cfg;
	for(i=0;i<4;i++){
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	e024      	b.n	80001c6 <KEYPAD_init+0x56>
		cfg.GPIO_PinNumber 	= KEYPAD_row[i];
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	4a15      	ldr	r2, [pc, #84]	; (80001d4 <KEYPAD_init+0x64>)
 8000180:	5cd3      	ldrb	r3, [r2, r3]
 8000182:	713b      	strb	r3, [r7, #4]
		cfg.GPIO_PinMode   	= GPIO_MODE_INPUT_PD;
 8000184:	2303      	movs	r3, #3
 8000186:	717b      	strb	r3, [r7, #5]
		cfg.GPIO_OutputSpeed	= GPIO_INPUT;
 8000188:	2300      	movs	r3, #0
 800018a:	71bb      	strb	r3, [r7, #6]
		MCAL_GPIO_init(KEYPAD_Port, &cfg);
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	4619      	mov	r1, r3
 8000190:	4811      	ldr	r0, [pc, #68]	; (80001d8 <KEYPAD_init+0x68>)
 8000192:	f000 fcfb 	bl	8000b8c <MCAL_GPIO_init>
		cfg.GPIO_PinNumber 	= KEYPAD_col[i];
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	4a10      	ldr	r2, [pc, #64]	; (80001dc <KEYPAD_init+0x6c>)
 800019a:	5cd3      	ldrb	r3, [r2, r3]
 800019c:	713b      	strb	r3, [r7, #4]
		cfg.GPIO_PinMode   	= GPIO_MODE_OUTPUT_PP;
 800019e:	2304      	movs	r3, #4
 80001a0:	717b      	strb	r3, [r7, #5]
		cfg.GPIO_OutputSpeed	= GPIO_SPEED_10M;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
		MCAL_GPIO_init(KEYPAD_Port, &cfg);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	480b      	ldr	r0, [pc, #44]	; (80001d8 <KEYPAD_init+0x68>)
 80001ac:	f000 fcee 	bl	8000b8c <MCAL_GPIO_init>
		MCAL_GPIO_writePin(KEYPAD_Port, KEYPAD_col[i], GPIO_LOW);
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <KEYPAD_init+0x6c>)
 80001b4:	5cd3      	ldrb	r3, [r2, r3]
 80001b6:	2200      	movs	r2, #0
 80001b8:	4619      	mov	r1, r3
 80001ba:	4807      	ldr	r0, [pc, #28]	; (80001d8 <KEYPAD_init+0x68>)
 80001bc:	f001 ffaa 	bl	8002114 <MCAL_GPIO_writePin>
	for(i=0;i<4;i++){
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	3301      	adds	r3, #1
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b03      	cmp	r3, #3
 80001ca:	d9d7      	bls.n	800017c <KEYPAD_init+0xc>
	}
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	40010c00 	.word	0x40010c00
 80001dc:	20000004 	.word	0x20000004

080001e0 <KEYPAD_getChar>:

char KEYPAD_getChar(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0

	uint8 i,j;
	for(i=0;i<4;i++){
 80001e6:	2300      	movs	r3, #0
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	e09e      	b.n	800032a <KEYPAD_getChar+0x14a>
		MCAL_GPIO_writePin(KEYPAD_Port, KEYPAD_col[i], GPIO_HIGH);
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a53      	ldr	r2, [pc, #332]	; (800033c <KEYPAD_getChar+0x15c>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4619      	mov	r1, r3
 80001f6:	4852      	ldr	r0, [pc, #328]	; (8000340 <KEYPAD_getChar+0x160>)
 80001f8:	f001 ff8c 	bl	8002114 <MCAL_GPIO_writePin>
		for(j=0;j<4;j++){
 80001fc:	2300      	movs	r3, #0
 80001fe:	71bb      	strb	r3, [r7, #6]
 8000200:	e084      	b.n	800030c <KEYPAD_getChar+0x12c>
			if(MCAL_GPIO_readPin(KEYPAD_Port, KEYPAD_row[j])){
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	4a4f      	ldr	r2, [pc, #316]	; (8000344 <KEYPAD_getChar+0x164>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	4619      	mov	r1, r3
 800020a:	484d      	ldr	r0, [pc, #308]	; (8000340 <KEYPAD_getChar+0x160>)
 800020c:	f001 fece 	bl	8001fac <MCAL_GPIO_readPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d077      	beq.n	8000306 <KEYPAD_getChar+0x126>
				while(MCAL_GPIO_readPin(KEYPAD_Port, KEYPAD_row[j]));
 8000216:	bf00      	nop
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	4a4a      	ldr	r2, [pc, #296]	; (8000344 <KEYPAD_getChar+0x164>)
 800021c:	5cd3      	ldrb	r3, [r2, r3]
 800021e:	4619      	mov	r1, r3
 8000220:	4847      	ldr	r0, [pc, #284]	; (8000340 <KEYPAD_getChar+0x160>)
 8000222:	f001 fec3 	bl	8001fac <MCAL_GPIO_readPin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f5      	bne.n	8000218 <KEYPAD_getChar+0x38>
				switch(i){
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b03      	cmp	r3, #3
 8000230:	d869      	bhi.n	8000306 <KEYPAD_getChar+0x126>
 8000232:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <KEYPAD_getChar+0x58>)
 8000234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000238:	08000249 	.word	0x08000249
 800023c:	08000275 	.word	0x08000275
 8000240:	080002a1 	.word	0x080002a1
 8000244:	080002cd 	.word	0x080002cd
				case 0:{
					switch(j){
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b03      	cmp	r3, #3
 800024c:	d854      	bhi.n	80002f8 <KEYPAD_getChar+0x118>
 800024e:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <KEYPAD_getChar+0x74>)
 8000250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000254:	08000265 	.word	0x08000265
 8000258:	08000269 	.word	0x08000269
 800025c:	0800026d 	.word	0x0800026d
 8000260:	08000271 	.word	0x08000271
					case 0:
						return '7';
 8000264:	2337      	movs	r3, #55	; 0x37
 8000266:	e065      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 1:
						return '4';
 8000268:	2334      	movs	r3, #52	; 0x34
 800026a:	e063      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 2:
						return '1';
 800026c:	2331      	movs	r3, #49	; 0x31
 800026e:	e061      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 3:
						return '!';
 8000270:	2321      	movs	r3, #33	; 0x21
 8000272:	e05f      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					}
					break;
				}
				case 1:{
					switch(j){
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	2b03      	cmp	r3, #3
 8000278:	d840      	bhi.n	80002fc <KEYPAD_getChar+0x11c>
 800027a:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <KEYPAD_getChar+0xa0>)
 800027c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000280:	08000291 	.word	0x08000291
 8000284:	08000295 	.word	0x08000295
 8000288:	08000299 	.word	0x08000299
 800028c:	0800029d 	.word	0x0800029d
					case 0:
						return '8';
 8000290:	2338      	movs	r3, #56	; 0x38
 8000292:	e04f      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 1:
						return '5';
 8000294:	2335      	movs	r3, #53	; 0x35
 8000296:	e04d      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 2:
						return '2';
 8000298:	2332      	movs	r3, #50	; 0x32
 800029a:	e04b      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 3:
						return '0';
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	e049      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					}
					break;
				}
				case 2:{
					switch(j){
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d82c      	bhi.n	8000300 <KEYPAD_getChar+0x120>
 80002a6:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <KEYPAD_getChar+0xcc>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	080002bd 	.word	0x080002bd
 80002b0:	080002c1 	.word	0x080002c1
 80002b4:	080002c5 	.word	0x080002c5
 80002b8:	080002c9 	.word	0x080002c9
					case 0:
						return '9';
 80002bc:	2339      	movs	r3, #57	; 0x39
 80002be:	e039      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 1:
						return '6';
 80002c0:	2336      	movs	r3, #54	; 0x36
 80002c2:	e037      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 2:
						return '3';
 80002c4:	2333      	movs	r3, #51	; 0x33
 80002c6:	e035      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 3:
						return '=';
 80002c8:	233d      	movs	r3, #61	; 0x3d
 80002ca:	e033      	b.n	8000334 <KEYPAD_getChar+0x154>

					}
					break;
				}
				case 3:{
					switch(j){
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d818      	bhi.n	8000304 <KEYPAD_getChar+0x124>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <KEYPAD_getChar+0xf8>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	080002ed 	.word	0x080002ed
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	080002f5 	.word	0x080002f5
					case 0:
						return '/';
 80002e8:	232f      	movs	r3, #47	; 0x2f
 80002ea:	e023      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 1:
						return '*';
 80002ec:	232a      	movs	r3, #42	; 0x2a
 80002ee:	e021      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 2:
						return '-';
 80002f0:	232d      	movs	r3, #45	; 0x2d
 80002f2:	e01f      	b.n	8000334 <KEYPAD_getChar+0x154>
						break;
					case 3:
						return '+';
 80002f4:	232b      	movs	r3, #43	; 0x2b
 80002f6:	e01d      	b.n	8000334 <KEYPAD_getChar+0x154>
					break;
 80002f8:	bf00      	nop
 80002fa:	e004      	b.n	8000306 <KEYPAD_getChar+0x126>
					break;
 80002fc:	bf00      	nop
 80002fe:	e002      	b.n	8000306 <KEYPAD_getChar+0x126>
					break;
 8000300:	bf00      	nop
 8000302:	e000      	b.n	8000306 <KEYPAD_getChar+0x126>
						break;
					}

					break;
 8000304:	bf00      	nop
		for(j=0;j<4;j++){
 8000306:	79bb      	ldrb	r3, [r7, #6]
 8000308:	3301      	adds	r3, #1
 800030a:	71bb      	strb	r3, [r7, #6]
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	2b03      	cmp	r3, #3
 8000310:	f67f af77 	bls.w	8000202 <KEYPAD_getChar+0x22>
				}
				}

			}
		}
		MCAL_GPIO_writePin(KEYPAD_Port, KEYPAD_col[i],GPIO_LOW);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	4a09      	ldr	r2, [pc, #36]	; (800033c <KEYPAD_getChar+0x15c>)
 8000318:	5cd3      	ldrb	r3, [r2, r3]
 800031a:	2200      	movs	r2, #0
 800031c:	4619      	mov	r1, r3
 800031e:	4808      	ldr	r0, [pc, #32]	; (8000340 <KEYPAD_getChar+0x160>)
 8000320:	f001 fef8 	bl	8002114 <MCAL_GPIO_writePin>
	for(i=0;i<4;i++){
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3301      	adds	r3, #1
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b03      	cmp	r3, #3
 800032e:	f67f af5d 	bls.w	80001ec <KEYPAD_getChar+0xc>

	}
	return '\0';
 8000332:	2300      	movs	r3, #0
}																	
 8000334:	4618      	mov	r0, r3
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000004 	.word	0x20000004
 8000340:	40010c00 	.word	0x40010c00
 8000344:	20000000 	.word	0x20000000

08000348 <delay>:
GPIO_config cfg;

uint8 LCD_cursor_position;
uint8 LCD_Pins[]= {GPIO_PIN0,GPIO_PIN1, GPIO_PIN2,GPIO_PIN3,GPIO_PIN4,GPIO_PIN5,GPIO_PIN6,GPIO_PIN7,RS,RW,EN};

void delay(uint32 d){
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]

	uint32 i,j;
	for(i=0;i<d;i++)
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00b      	b.n	800036e <delay+0x26>
		for(j=0;j<255;j++);
 8000356:	2300      	movs	r3, #0
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	e002      	b.n	8000362 <delay+0x1a>
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	3301      	adds	r3, #1
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	2bfe      	cmp	r3, #254	; 0xfe
 8000366:	d9f9      	bls.n	800035c <delay+0x14>
	for(i=0;i<d;i++)
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3301      	adds	r3, #1
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	429a      	cmp	r2, r3
 8000374:	d3ef      	bcc.n	8000356 <delay+0xe>
}
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <LCD_kick>:

void LCD_kick(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

	MCAL_GPIO_writePin(LCD_control, EN, GPIO_HIGH);
 8000384:	2201      	movs	r2, #1
 8000386:	210a      	movs	r1, #10
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <LCD_kick+0x24>)
 800038a:	f001 fec3 	bl	8002114 <MCAL_GPIO_writePin>
	delay(1);
 800038e:	2001      	movs	r0, #1
 8000390:	f7ff ffda 	bl	8000348 <delay>
	MCAL_GPIO_writePin(LCD_control, EN, GPIO_LOW);
 8000394:	2200      	movs	r2, #0
 8000396:	210a      	movs	r1, #10
 8000398:	4802      	ldr	r0, [pc, #8]	; (80003a4 <LCD_kick+0x24>)
 800039a:	f001 febb 	bl	8002114 <MCAL_GPIO_writePin>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010800 	.word	0x40010800

080003a8 <LCD_isBusy>:

void LCD_isBusy(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

	uint8 i;
	for(i=0;i<8;i++){
 80003ae:	2300      	movs	r3, #0
 80003b0:	71fb      	strb	r3, [r7, #7]
 80003b2:	e011      	b.n	80003d8 <LCD_isBusy+0x30>
		cfg.GPIO_PinNumber 		= LCD_Pins[i];
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4a25      	ldr	r2, [pc, #148]	; (800044c <LCD_isBusy+0xa4>)
 80003b8:	5cd2      	ldrb	r2, [r2, r3]
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <LCD_isBusy+0xa8>)
 80003bc:	701a      	strb	r2, [r3, #0]
		cfg.GPIO_PinMode   		= GPIO_MODE_INPUT_FLO;
 80003be:	4b24      	ldr	r3, [pc, #144]	; (8000450 <LCD_isBusy+0xa8>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	705a      	strb	r2, [r3, #1]
		cfg.GPIO_OutputSpeed 	= GPIO_INPUT;
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <LCD_isBusy+0xa8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_init(LCD_PORT,&cfg);
 80003ca:	4921      	ldr	r1, [pc, #132]	; (8000450 <LCD_isBusy+0xa8>)
 80003cc:	4821      	ldr	r0, [pc, #132]	; (8000454 <LCD_isBusy+0xac>)
 80003ce:	f000 fbdd 	bl	8000b8c <MCAL_GPIO_init>
	for(i=0;i<8;i++){
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3301      	adds	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b07      	cmp	r3, #7
 80003dc:	d9ea      	bls.n	80003b4 <LCD_isBusy+0xc>
	}

	MCAL_GPIO_writePin(LCD_control, RS, GPIO_LOW);
 80003de:	2200      	movs	r2, #0
 80003e0:	2108      	movs	r1, #8
 80003e2:	481c      	ldr	r0, [pc, #112]	; (8000454 <LCD_isBusy+0xac>)
 80003e4:	f001 fe96 	bl	8002114 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_control, RW, GPIO_HIGH);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2109      	movs	r1, #9
 80003ec:	4819      	ldr	r0, [pc, #100]	; (8000454 <LCD_isBusy+0xac>)
 80003ee:	f001 fe91 	bl	8002114 <MCAL_GPIO_writePin>
	LCD_kick();	
 80003f2:	f7ff ffc5 	bl	8000380 <LCD_kick>
	while(MCAL_GPIO_readPin(LCD_PORT, GPIO_PIN7) == BUSY)LCD_kick();
 80003f6:	e001      	b.n	80003fc <LCD_isBusy+0x54>
 80003f8:	f7ff ffc2 	bl	8000380 <LCD_kick>
 80003fc:	2107      	movs	r1, #7
 80003fe:	4815      	ldr	r0, [pc, #84]	; (8000454 <LCD_isBusy+0xac>)
 8000400:	f001 fdd4 	bl	8001fac <MCAL_GPIO_readPin>
 8000404:	4603      	mov	r3, r0
 8000406:	2b01      	cmp	r3, #1
 8000408:	d0f6      	beq.n	80003f8 <LCD_isBusy+0x50>

	MCAL_GPIO_writePin(LCD_control, RW, GPIO_LOW);
 800040a:	2200      	movs	r2, #0
 800040c:	2109      	movs	r1, #9
 800040e:	4811      	ldr	r0, [pc, #68]	; (8000454 <LCD_isBusy+0xac>)
 8000410:	f001 fe80 	bl	8002114 <MCAL_GPIO_writePin>
	for(i=0;i<8;i++){
 8000414:	2300      	movs	r3, #0
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	e011      	b.n	800043e <LCD_isBusy+0x96>
		cfg.GPIO_PinNumber 		= LCD_Pins[i];
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	4a0b      	ldr	r2, [pc, #44]	; (800044c <LCD_isBusy+0xa4>)
 800041e:	5cd2      	ldrb	r2, [r2, r3]
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <LCD_isBusy+0xa8>)
 8000422:	701a      	strb	r2, [r3, #0]
		cfg.GPIO_PinMode   		= GPIO_MODE_OUTPUT_PP;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <LCD_isBusy+0xa8>)
 8000426:	2204      	movs	r2, #4
 8000428:	705a      	strb	r2, [r3, #1]
		cfg.GPIO_OutputSpeed 	= GPIO_SPEED_10M;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <LCD_isBusy+0xa8>)
 800042c:	2201      	movs	r2, #1
 800042e:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_init(LCD_PORT,&cfg);
 8000430:	4907      	ldr	r1, [pc, #28]	; (8000450 <LCD_isBusy+0xa8>)
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <LCD_isBusy+0xac>)
 8000434:	f000 fbaa 	bl	8000b8c <MCAL_GPIO_init>
	for(i=0;i<8;i++){
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	3301      	adds	r3, #1
 800043c:	71fb      	strb	r3, [r7, #7]
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b07      	cmp	r3, #7
 8000442:	d9ea      	bls.n	800041a <LCD_isBusy+0x72>
	}
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000008 	.word	0x20000008
 8000450:	20000034 	.word	0x20000034
 8000454:	40010800 	.word	0x40010800

08000458 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]

#ifdef LCD_8_BIT_MODE
	LCD_isBusy();
 8000462:	f7ff ffa1 	bl	80003a8 <LCD_isBusy>
	MCAL_GPIO_writePort(LCD_PORT,command);
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	b29b      	uxth	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <LCD_sendCommand+0x3c>)
 800046e:	f002 f815 	bl	800249c <MCAL_GPIO_writePort>
	MCAL_GPIO_writePin(LCD_control, RS, GPIO_LOW);
	MCAL_GPIO_writePin(LCD_control, RW, GPIO_LOW);
	LCD_kick();
	MCAL_GPIO_writePort(LCD_PORT,(command<<SHIFT_4));
#endif
	MCAL_GPIO_writePin(LCD_control, RS, GPIO_LOW);
 8000472:	2200      	movs	r2, #0
 8000474:	2108      	movs	r1, #8
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <LCD_sendCommand+0x3c>)
 8000478:	f001 fe4c 	bl	8002114 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_control, RW, GPIO_LOW);
 800047c:	2200      	movs	r2, #0
 800047e:	2109      	movs	r1, #9
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <LCD_sendCommand+0x3c>)
 8000482:	f001 fe47 	bl	8002114 <MCAL_GPIO_writePin>
	LCD_kick();
 8000486:	f7ff ff7b 	bl	8000380 <LCD_kick>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800

08000498 <LCD_clearScreen>:

void LCD_clearScreen(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ffdb 	bl	8000458 <LCD_sendCommand>
	LCD_cursor_position = 0;
 80004a2:	4b02      	ldr	r3, [pc, #8]	; (80004ac <LCD_clearScreen+0x14>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000030 	.word	0x20000030

080004b0 <LCD_init>:

void LCD_init(void){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

	uint8 i;
	delay(20);
 80004b6:	2014      	movs	r0, #20
 80004b8:	f7ff ff46 	bl	8000348 <delay>

	for(i=0;i<11;i++){
 80004bc:	2300      	movs	r3, #0
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	e019      	b.n	80004f6 <LCD_init+0x46>
		cfg.GPIO_PinNumber 		= LCD_Pins[i];
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4a15      	ldr	r2, [pc, #84]	; (800051c <LCD_init+0x6c>)
 80004c6:	5cd2      	ldrb	r2, [r2, r3]
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <LCD_init+0x70>)
 80004ca:	701a      	strb	r2, [r3, #0]
		cfg.GPIO_PinMode   		= GPIO_MODE_OUTPUT_PP;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <LCD_init+0x70>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	705a      	strb	r2, [r3, #1]
		cfg.GPIO_OutputSpeed 	= GPIO_SPEED_10M;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <LCD_init+0x70>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_init(LCD_PORT,&cfg);
 80004d8:	4911      	ldr	r1, [pc, #68]	; (8000520 <LCD_init+0x70>)
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <LCD_init+0x74>)
 80004dc:	f000 fb56 	bl	8000b8c <MCAL_GPIO_init>
		MCAL_GPIO_writePin(LCD_PORT, LCD_Pins[i], GPIO_LOW);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <LCD_init+0x6c>)
 80004e4:	5cd3      	ldrb	r3, [r2, r3]
 80004e6:	2200      	movs	r2, #0
 80004e8:	4619      	mov	r1, r3
 80004ea:	480e      	ldr	r0, [pc, #56]	; (8000524 <LCD_init+0x74>)
 80004ec:	f001 fe12 	bl	8002114 <MCAL_GPIO_writePin>
	for(i=0;i<11;i++){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	3301      	adds	r3, #1
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0a      	cmp	r3, #10
 80004fa:	d9e2      	bls.n	80004c2 <LCD_init+0x12>
	}

	delay(15);
 80004fc:	200f      	movs	r0, #15
 80004fe:	f7ff ff23 	bl	8000348 <delay>

#ifdef LCD_8_BIT_MODE
	LCD_sendCommand(LCD_8BITS_2LINES_5X8);
 8000502:	2038      	movs	r0, #56	; 0x38
 8000504:	f7ff ffa8 	bl	8000458 <LCD_sendCommand>

#ifdef LCD_4_BIT_MODE
	LCD_sendCommand(LCD_RETURN_HOME);
	LCD_sendCommand(LCD_4BITS_2LINES_5X8);
#endif
	LCD_sendCommand(LCD_ENTRY_INC);
 8000508:	2006      	movs	r0, #6
 800050a:	f7ff ffa5 	bl	8000458 <LCD_sendCommand>
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_BLINK);
 800050e:	200f      	movs	r0, #15
 8000510:	f7ff ffa2 	bl	8000458 <LCD_sendCommand>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000008 	.word	0x20000008
 8000520:	20000034 	.word	0x20000034
 8000524:	40010800 	.word	0x40010800

08000528 <LCD_printChar>:

void LCD_printChar(uint8 data){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]

	if(LCD_cursor_position == 32){
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <LCD_printChar+0x6c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b20      	cmp	r3, #32
 8000538:	d105      	bne.n	8000546 <LCD_printChar+0x1e>
		LCD_clearScreen();
 800053a:	f7ff ffad 	bl	8000498 <LCD_clearScreen>
		LCD_goToXY(1,0);
 800053e:	2100      	movs	r1, #0
 8000540:	2001      	movs	r0, #1
 8000542:	f000 f841 	bl	80005c8 <LCD_goToXY>
	}

#ifdef LCD_8_BIT_MODE
	LCD_isBusy();
 8000546:	f7ff ff2f 	bl	80003a8 <LCD_isBusy>
	MCAL_GPIO_writePort(LCD_PORT,data);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	b29b      	uxth	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	4811      	ldr	r0, [pc, #68]	; (8000598 <LCD_printChar+0x70>)
 8000552:	f001 ffa3 	bl	800249c <MCAL_GPIO_writePort>
	MCAL_GPIO_writePin(LCD_control, RS, GPIO_HIGH);
	MCAL_GPIO_writePin(LCD_control, RW, GPIO_LOW);
	LCD_kick();
	MCAL_GPIO_writePort(LCD_PORT,((data & 0x0F)<<SHIFT_4));
#endif
	MCAL_GPIO_writePin(LCD_control, RS, GPIO_HIGH);
 8000556:	2201      	movs	r2, #1
 8000558:	2108      	movs	r1, #8
 800055a:	480f      	ldr	r0, [pc, #60]	; (8000598 <LCD_printChar+0x70>)
 800055c:	f001 fdda 	bl	8002114 <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_control, RW, GPIO_LOW);
 8000560:	2200      	movs	r2, #0
 8000562:	2109      	movs	r1, #9
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <LCD_printChar+0x70>)
 8000566:	f001 fdd5 	bl	8002114 <MCAL_GPIO_writePin>
	LCD_kick();
 800056a:	f7ff ff09 	bl	8000380 <LCD_kick>
	LCD_cursor_position++;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <LCD_printChar+0x6c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LCD_printChar+0x6c>)
 8000578:	701a      	strb	r2, [r3, #0]

	if( LCD_cursor_position == 16){
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LCD_printChar+0x6c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b10      	cmp	r3, #16
 8000580:	d103      	bne.n	800058a <LCD_printChar+0x62>

		LCD_goToXY(2,0);
 8000582:	2100      	movs	r1, #0
 8000584:	2002      	movs	r0, #2
 8000586:	f000 f81f 	bl	80005c8 <LCD_goToXY>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000030 	.word	0x20000030
 8000598:	40010800 	.word	0x40010800

0800059c <LCD_printString>:


void LCD_printString(char * data){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

	while(*data != '\0'){
 80005a4:	e007      	b.n	80005b6 <LCD_printString+0x1a>
		LCD_printChar(*data);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffbc 	bl	8000528 <LCD_printChar>
		data++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3301      	adds	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
	while(*data != '\0'){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f3      	bne.n	80005a6 <LCD_printString+0xa>
	}
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <LCD_goToXY>:
void LCD_goToXY(unsigned char line ,unsigned char position){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]

	switch(line){
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d002      	beq.n	80005e4 <LCD_goToXY+0x1c>
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d00d      	beq.n	80005fe <LCD_goToXY+0x36>
			LCD_cursor_position = position+16;
		}
		break;
	}
	}
}
 80005e2:	e01e      	b.n	8000622 <LCD_goToXY+0x5a>
		if(position < 16 && position >=0){
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d818      	bhi.n	800061c <LCD_goToXY+0x54>
			LCD_sendCommand(LCD_FIRST_LINE+position);
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	3b80      	subs	r3, #128	; 0x80
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff31 	bl	8000458 <LCD_sendCommand>
			LCD_cursor_position = position;
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <LCD_goToXY+0x64>)
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	7013      	strb	r3, [r2, #0]
		break;
 80005fc:	e00e      	b.n	800061c <LCD_goToXY+0x54>
		if(position <16 && position>=0){
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d80d      	bhi.n	8000620 <LCD_goToXY+0x58>
			LCD_sendCommand(LCD_SECOND_LINE+position);
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	3b40      	subs	r3, #64	; 0x40
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff24 	bl	8000458 <LCD_sendCommand>
			LCD_cursor_position = position+16;
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	3310      	adds	r3, #16
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <LCD_goToXY+0x64>)
 8000618:	701a      	strb	r2, [r3, #0]
		break;
 800061a:	e001      	b.n	8000620 <LCD_goToXY+0x58>
		break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <LCD_goToXY+0x5a>
		break;
 8000620:	bf00      	nop
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000030 	.word	0x20000030

08000630 <update_EXTI>:
#include "stm32f103c6_exti_driver.h"


void (*GP_IRQHanderler[16])(void);

void update_EXTI(EXTI_config * cfg){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

	GPIO_config conf;
	conf.GPIO_PinNumber 	= 	cfg->EXTI_Map.EXTI_GPIO_PinNumber;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	723b      	strb	r3, [r7, #8]
	conf.GPIO_PinMode		=	GPIO_MODE_INPUT_FLO;
 800063e:	2301      	movs	r3, #1
 8000640:	727b      	strb	r3, [r7, #9]
	conf.GPIO_OutputSpeed	=	GPIO_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_init(cfg->EXTI_Map.EXTI_GPIO_PORT, &conf);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fa9b 	bl	8000b8c <MCAL_GPIO_init>

	switch(cfg->EXTI_Trigger){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7b1b      	ldrb	r3, [r3, #12]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d01b      	beq.n	8000696 <update_EXTI+0x66>
 800065e:	2b02      	cmp	r3, #2
 8000660:	d031      	beq.n	80006c6 <update_EXTI+0x96>
 8000662:	2b00      	cmp	r3, #0
 8000664:	d146      	bne.n	80006f4 <update_EXTI+0xc4>
	case EXTI_FALLING:
		EXTI->RTSR.RTSR &= ~(1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 8000666:	4baa      	ldr	r3, [pc, #680]	; (8000910 <update_EXTI+0x2e0>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	7a12      	ldrb	r2, [r2, #8]
 800066e:	4611      	mov	r1, r2
 8000670:	2201      	movs	r2, #1
 8000672:	408a      	lsls	r2, r1
 8000674:	43d2      	mvns	r2, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4aa5      	ldr	r2, [pc, #660]	; (8000910 <update_EXTI+0x2e0>)
 800067a:	400b      	ands	r3, r1
 800067c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR.FTSR |= (1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 800067e:	4ba4      	ldr	r3, [pc, #656]	; (8000910 <update_EXTI+0x2e0>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	7a12      	ldrb	r2, [r2, #8]
 8000686:	4611      	mov	r1, r2
 8000688:	2201      	movs	r2, #1
 800068a:	408a      	lsls	r2, r1
 800068c:	4611      	mov	r1, r2
 800068e:	4aa0      	ldr	r2, [pc, #640]	; (8000910 <update_EXTI+0x2e0>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
		break;
 8000694:	e02e      	b.n	80006f4 <update_EXTI+0xc4>
	case EXTI_RISING:
		EXTI->RTSR.RTSR |= (1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 8000696:	4b9e      	ldr	r3, [pc, #632]	; (8000910 <update_EXTI+0x2e0>)
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	7a12      	ldrb	r2, [r2, #8]
 800069e:	4611      	mov	r1, r2
 80006a0:	2201      	movs	r2, #1
 80006a2:	408a      	lsls	r2, r1
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a9a      	ldr	r2, [pc, #616]	; (8000910 <update_EXTI+0x2e0>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6093      	str	r3, [r2, #8]
		EXTI->FTSR.FTSR &= ~(1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 80006ac:	4b98      	ldr	r3, [pc, #608]	; (8000910 <update_EXTI+0x2e0>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7a12      	ldrb	r2, [r2, #8]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	43d2      	mvns	r2, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a94      	ldr	r2, [pc, #592]	; (8000910 <update_EXTI+0x2e0>)
 80006c0:	400b      	ands	r3, r1
 80006c2:	60d3      	str	r3, [r2, #12]
		break;
 80006c4:	e016      	b.n	80006f4 <update_EXTI+0xc4>
	case EXTI_RISING_FALLING:
		EXTI->RTSR.RTSR |= (1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 80006c6:	4b92      	ldr	r3, [pc, #584]	; (8000910 <update_EXTI+0x2e0>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7a12      	ldrb	r2, [r2, #8]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a8e      	ldr	r2, [pc, #568]	; (8000910 <update_EXTI+0x2e0>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
		EXTI->FTSR.FTSR |= (1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 80006dc:	4b8c      	ldr	r3, [pc, #560]	; (8000910 <update_EXTI+0x2e0>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7a12      	ldrb	r2, [r2, #8]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a88      	ldr	r2, [pc, #544]	; (8000910 <update_EXTI+0x2e0>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	60d3      	str	r3, [r2, #12]
		break;
 80006f2:	bf00      	nop
	}

	uint8 index	 	=	(cfg->EXTI_Map.EXTI_IRQLineNumber) / 4;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7a1b      	ldrb	r3, [r3, #8]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	73fb      	strb	r3, [r7, #15]
	uint8 position  =	(cfg->EXTI_Map.EXTI_IRQLineNumber) % 4;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	73bb      	strb	r3, [r7, #14]

	if(index ==	0){
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10b      	bne.n	8000724 <update_EXTI+0xf4>
		AFIO->EXITCR1.EXITCR1 |= 1<<(4*position);
 800070c:	4b81      	ldr	r3, [pc, #516]	; (8000914 <update_EXTI+0x2e4>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	7bba      	ldrb	r2, [r7, #14]
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	2101      	movs	r1, #1
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a7d      	ldr	r2, [pc, #500]	; (8000914 <update_EXTI+0x2e4>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6093      	str	r3, [r2, #8]
 8000722:	e02b      	b.n	800077c <update_EXTI+0x14c>
	}else if(index == 1){
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10b      	bne.n	8000742 <update_EXTI+0x112>
		AFIO->EXITCR2.EXITCR2 |= 1<<(4*position);
 800072a:	4b7a      	ldr	r3, [pc, #488]	; (8000914 <update_EXTI+0x2e4>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	7bba      	ldrb	r2, [r7, #14]
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	2101      	movs	r1, #1
 8000734:	fa01 f202 	lsl.w	r2, r1, r2
 8000738:	4611      	mov	r1, r2
 800073a:	4a76      	ldr	r2, [pc, #472]	; (8000914 <update_EXTI+0x2e4>)
 800073c:	430b      	orrs	r3, r1
 800073e:	60d3      	str	r3, [r2, #12]
 8000740:	e01c      	b.n	800077c <update_EXTI+0x14c>
	}else if(index == 2){
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d10b      	bne.n	8000760 <update_EXTI+0x130>
		AFIO->EXITCR3.EXITCR3 |= 1<<(4*position);
 8000748:	4b72      	ldr	r3, [pc, #456]	; (8000914 <update_EXTI+0x2e4>)
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	7bba      	ldrb	r2, [r7, #14]
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a6e      	ldr	r2, [pc, #440]	; (8000914 <update_EXTI+0x2e4>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6113      	str	r3, [r2, #16]
 800075e:	e00d      	b.n	800077c <update_EXTI+0x14c>
	}else if(index == 3){
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d10a      	bne.n	800077c <update_EXTI+0x14c>
		AFIO->EXITCR4.EXITCR4 |= 1<<(4*position);
 8000766:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <update_EXTI+0x2e4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	7bba      	ldrb	r2, [r7, #14]
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a67      	ldr	r2, [pc, #412]	; (8000914 <update_EXTI+0x2e4>)
 8000778:	430b      	orrs	r3, r1
 800077a:	6153      	str	r3, [r2, #20]
	}

	GP_IRQHanderler[cfg->EXTI_Map.EXTI_IRQLineNumber] =cfg->P_IRQHandler;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	4619      	mov	r1, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4a64      	ldr	r2, [pc, #400]	; (8000918 <update_EXTI+0x2e8>)
 8000788:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(cfg->EXTI_EnableState == EXTI_ENABLE){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7b5b      	ldrb	r3, [r3, #13]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d165      	bne.n	8000860 <update_EXTI+0x230>

		EXTI->IMR.IMR |= (1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 8000794:	4b5e      	ldr	r3, [pc, #376]	; (8000910 <update_EXTI+0x2e0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	7a12      	ldrb	r2, [r2, #8]
 800079c:	4611      	mov	r1, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	408a      	lsls	r2, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a5a      	ldr	r2, [pc, #360]	; (8000910 <update_EXTI+0x2e0>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6013      	str	r3, [r2, #0]
		switch(cfg->EXTI_Map.EXTI_IRQLineNumber){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	7a1b      	ldrb	r3, [r3, #8]
 80007ae:	2b0f      	cmp	r3, #15
 80007b0:	f200 80c8 	bhi.w	8000944 <update_EXTI+0x314>
 80007b4:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <update_EXTI+0x18c>)
 80007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ba:	bf00      	nop
 80007bc:	080007fd 	.word	0x080007fd
 80007c0:	0800080b 	.word	0x0800080b
 80007c4:	08000819 	.word	0x08000819
 80007c8:	08000827 	.word	0x08000827
 80007cc:	08000835 	.word	0x08000835
 80007d0:	08000843 	.word	0x08000843
 80007d4:	08000843 	.word	0x08000843
 80007d8:	08000843 	.word	0x08000843
 80007dc:	08000843 	.word	0x08000843
 80007e0:	08000843 	.word	0x08000843
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000851 	.word	0x08000851
 80007ec:	08000851 	.word	0x08000851
 80007f0:	08000851 	.word	0x08000851
 80007f4:	08000851 	.word	0x08000851
 80007f8:	08000851 	.word	0x08000851
		case EXTI_L0:
			NVIC_EXTI0_ENABLE;
 80007fc:	4b47      	ldr	r3, [pc, #284]	; (800091c <update_EXTI+0x2ec>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a46      	ldr	r2, [pc, #280]	; (800091c <update_EXTI+0x2ec>)
 8000802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000806:	6013      	str	r3, [r2, #0]
			break;
 8000808:	e09c      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L1:
			NVIC_EXTI1_ENABLE;
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <update_EXTI+0x2ec>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a43      	ldr	r2, [pc, #268]	; (800091c <update_EXTI+0x2ec>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6013      	str	r3, [r2, #0]
			break;
 8000816:	e095      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L2:
			NVIC_EXTI2_ENABLE;
 8000818:	4b40      	ldr	r3, [pc, #256]	; (800091c <update_EXTI+0x2ec>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a3f      	ldr	r2, [pc, #252]	; (800091c <update_EXTI+0x2ec>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	6013      	str	r3, [r2, #0]
			break;
 8000824:	e08e      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L3:
			NVIC_EXTI1_ENABLE;
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <update_EXTI+0x2ec>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a3c      	ldr	r2, [pc, #240]	; (800091c <update_EXTI+0x2ec>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6013      	str	r3, [r2, #0]
			break;
 8000832:	e087      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L4:
			NVIC_EXTI1_ENABLE;
 8000834:	4b39      	ldr	r3, [pc, #228]	; (800091c <update_EXTI+0x2ec>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a38      	ldr	r2, [pc, #224]	; (800091c <update_EXTI+0x2ec>)
 800083a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083e:	6013      	str	r3, [r2, #0]
			break;
 8000840:	e080      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L5:
		case EXTI_L6:
		case EXTI_L7:
		case EXTI_L8:
		case EXTI_L9:
			NVIC_EXTI9_5_ENABLE;
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <update_EXTI+0x2ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a35      	ldr	r2, [pc, #212]	; (800091c <update_EXTI+0x2ec>)
 8000848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800084c:	6013      	str	r3, [r2, #0]
			break;
 800084e:	e079      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L11:
		case EXTI_L12:
		case EXTI_L13:
		case EXTI_L14:
		case EXTI_L15:
			NVIC_EXTI15_10_ENABLE;
 8000850:	4b33      	ldr	r3, [pc, #204]	; (8000920 <update_EXTI+0x2f0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a32      	ldr	r2, [pc, #200]	; (8000920 <update_EXTI+0x2f0>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6013      	str	r3, [r2, #0]
			break;
 800085c:	bf00      	nop
 800085e:	e071      	b.n	8000944 <update_EXTI+0x314>
		}

	}else{
		EXTI->IMR.IMR &= ~(1<<(cfg->EXTI_Map.EXTI_IRQLineNumber));
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <update_EXTI+0x2e0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	7a12      	ldrb	r2, [r2, #8]
 8000868:	4611      	mov	r1, r2
 800086a:	2201      	movs	r2, #1
 800086c:	408a      	lsls	r2, r1
 800086e:	43d2      	mvns	r2, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a27      	ldr	r2, [pc, #156]	; (8000910 <update_EXTI+0x2e0>)
 8000874:	400b      	ands	r3, r1
 8000876:	6013      	str	r3, [r2, #0]
		switch(cfg->EXTI_Map.EXTI_IRQLineNumber){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d861      	bhi.n	8000944 <update_EXTI+0x314>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <update_EXTI+0x258>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	080008c9 	.word	0x080008c9
 800088c:	080008d7 	.word	0x080008d7
 8000890:	080008e5 	.word	0x080008e5
 8000894:	080008f3 	.word	0x080008f3
 8000898:	08000901 	.word	0x08000901
 800089c:	08000929 	.word	0x08000929
 80008a0:	08000929 	.word	0x08000929
 80008a4:	08000929 	.word	0x08000929
 80008a8:	08000929 	.word	0x08000929
 80008ac:	08000929 	.word	0x08000929
 80008b0:	08000937 	.word	0x08000937
 80008b4:	08000937 	.word	0x08000937
 80008b8:	08000937 	.word	0x08000937
 80008bc:	08000937 	.word	0x08000937
 80008c0:	08000937 	.word	0x08000937
 80008c4:	08000937 	.word	0x08000937
		case EXTI_L0:
			NVIC_EXTI0_DISABLE;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <update_EXTI+0x2f4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <update_EXTI+0x2f4>)
 80008ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008d2:	6013      	str	r3, [r2, #0]
			break;
 80008d4:	e036      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L1:
			NVIC_EXTI1_DISABLE;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <update_EXTI+0x2f4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <update_EXTI+0x2f4>)
 80008dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008e0:	6013      	str	r3, [r2, #0]
			break;
 80008e2:	e02f      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L2:
			NVIC_EXTI2_DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <update_EXTI+0x2f4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <update_EXTI+0x2f4>)
 80008ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
			break;
 80008f0:	e028      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L3:
			NVIC_EXTI1_DISABLE;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <update_EXTI+0x2f4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <update_EXTI+0x2f4>)
 80008f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008fc:	6013      	str	r3, [r2, #0]
			break;
 80008fe:	e021      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L4:
			NVIC_EXTI1_DISABLE;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <update_EXTI+0x2f4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <update_EXTI+0x2f4>)
 8000906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800090a:	6013      	str	r3, [r2, #0]
			break;
 800090c:	e01a      	b.n	8000944 <update_EXTI+0x314>
 800090e:	bf00      	nop
 8000910:	40010400 	.word	0x40010400
 8000914:	40010000 	.word	0x40010000
 8000918:	20000038 	.word	0x20000038
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000e104 	.word	0xe000e104
 8000924:	e000e180 	.word	0xe000e180
		case EXTI_L5:
		case EXTI_L6:
		case EXTI_L7:
		case EXTI_L8:
		case EXTI_L9:
			NVIC_EXTI9_5_DISABLE;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <update_EXTI+0x31c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <update_EXTI+0x31c>)
 800092e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000932:	6013      	str	r3, [r2, #0]
			break;
 8000934:	e006      	b.n	8000944 <update_EXTI+0x314>
		case EXTI_L11:
		case EXTI_L12:
		case EXTI_L13:
		case EXTI_L14:
		case EXTI_L15:
			NVIC_EXTI15_10_DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <update_EXTI+0x320>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <update_EXTI+0x320>)
 800093c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000940:	6013      	str	r3, [r2, #0]
			break;
 8000942:	bf00      	nop
		}

	}
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	e000e180 	.word	0xe000e180
 8000950:	e000e184 	.word	0xe000e184

08000954 <MCAL_EXTI_init>:
 * @param [in] 	-cfg: contains the configuration for EXTI Module.
 * @retval 		-none
 * Note			-none
 */

void MCAL_EXTI_init(EXTI_config * cfg){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

	update_EXTI(cfg);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe67 	bl	8000630 <update_EXTI>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <EXTI0_IRQHandler>:

	update_EXTI(cfg);

}

void EXTI0_IRQHandler(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

	EXTI->PR.bits.PR0 = 0b1;
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <EXTI0_IRQHandler+0x18>)
 8000972:	6953      	ldr	r3, [r2, #20]
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6153      	str	r3, [r2, #20]
	GP_IRQHanderler[0]();
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <EXTI0_IRQHandler+0x1c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4798      	blx	r3
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40010400 	.word	0x40010400
 8000988:	20000038 	.word	0x20000038

0800098c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	EXTI->PR.bits.PR1 = 0b1;
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <EXTI1_IRQHandler+0x18>)
 8000992:	6953      	ldr	r3, [r2, #20]
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6153      	str	r3, [r2, #20]
	GP_IRQHanderler[1]();
 800099a:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <EXTI1_IRQHandler+0x1c>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4798      	blx	r3

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40010400 	.word	0x40010400
 80009a8:	20000038 	.word	0x20000038

080009ac <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	EXTI->PR.bits.PR2 = 0b1;
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <EXTI2_IRQHandler+0x18>)
 80009b2:	6953      	ldr	r3, [r2, #20]
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6153      	str	r3, [r2, #20]
	GP_IRQHanderler[2]();
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <EXTI2_IRQHandler+0x1c>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	4798      	blx	r3
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40010400 	.word	0x40010400
 80009c8:	20000038 	.word	0x20000038

080009cc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	EXTI->PR.bits.PR3 = 0b1;
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <EXTI3_IRQHandler+0x18>)
 80009d2:	6953      	ldr	r3, [r2, #20]
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6153      	str	r3, [r2, #20]
	GP_IRQHanderler[3]();
 80009da:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <EXTI3_IRQHandler+0x1c>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	4798      	blx	r3
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40010400 	.word	0x40010400
 80009e8:	20000038 	.word	0x20000038

080009ec <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	EXTI->PR.bits.PR4 = 0b1;
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <EXTI4_IRQHandler+0x18>)
 80009f2:	6953      	ldr	r3, [r2, #20]
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6153      	str	r3, [r2, #20]
	GP_IRQHanderler[4]();
 80009fa:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <EXTI4_IRQHandler+0x1c>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	4798      	blx	r3
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40010400 	.word	0x40010400
 8000a08:	20000038 	.word	0x20000038

08000a0c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

	if(EXTI->PR.bits.PR5){
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d008      	beq.n	8000a30 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR.bits.PR5 = 0b1;
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a20:	6953      	ldr	r3, [r2, #20]
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[5]();
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <EXTI9_5_IRQHandler+0xac>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4798      	blx	r3
		GP_IRQHanderler[8]();
	}else if(EXTI->PR.bits.PR9){
		GP_IRQHanderler[9]();
		EXTI->PR.bits.PR9 = 0b1;
	}
}
 8000a2e:	e03e      	b.n	8000aae <EXTI9_5_IRQHandler+0xa2>
	}else if(EXTI->PR.bits.PR6){
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d008      	beq.n	8000a50 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR.bits.PR6 = 0b1;
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a40:	6953      	ldr	r3, [r2, #20]
 8000a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a46:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[6]();
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <EXTI9_5_IRQHandler+0xac>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4798      	blx	r3
}
 8000a4e:	e02e      	b.n	8000aae <EXTI9_5_IRQHandler+0xa2>
	}else if(EXTI->PR.bits.PR7){
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d008      	beq.n	8000a70 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR.bits.PR7 = 0b1;
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a60:	6953      	ldr	r3, [r2, #20]
 8000a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a66:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[7]();
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <EXTI9_5_IRQHandler+0xac>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	4798      	blx	r3
}
 8000a6e:	e01e      	b.n	8000aae <EXTI9_5_IRQHandler+0xa2>
	}else if(EXTI->PR.bits.PR8){
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d008      	beq.n	8000a90 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR.bits.PR8 = 0b1;
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a80:	6953      	ldr	r3, [r2, #20]
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[8]();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <EXTI9_5_IRQHandler+0xac>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4798      	blx	r3
}
 8000a8e:	e00e      	b.n	8000aae <EXTI9_5_IRQHandler+0xa2>
	}else if(EXTI->PR.bits.PR9){
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d007      	beq.n	8000aae <EXTI9_5_IRQHandler+0xa2>
		GP_IRQHanderler[9]();
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <EXTI9_5_IRQHandler+0xac>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	4798      	blx	r3
		EXTI->PR.bits.PR9 = 0b1;
 8000aa4:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <EXTI9_5_IRQHandler+0xa8>)
 8000aa6:	6953      	ldr	r3, [r2, #20]
 8000aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aac:	6153      	str	r3, [r2, #20]
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010400 	.word	0x40010400
 8000ab8:	20000038 	.word	0x20000038

08000abc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if(EXTI->PR.bits.PR10){
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR.bits.PR10 = 0b1;
 8000ace:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000ad0:	6953      	ldr	r3, [r2, #20]
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[10]();
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <EXTI15_10_IRQHandler+0xcc>)
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	4798      	blx	r3
	}else if(EXTI->PR.bits.PR15){
		EXTI->PR.bits.PR15 = 0b1;
		GP_IRQHanderler[15]();
	}

}
 8000ade:	e04e      	b.n	8000b7e <EXTI15_10_IRQHandler+0xc2>
	}else if(EXTI->PR.bits.PR11){
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d008      	beq.n	8000b00 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR.bits.PR11 = 0b1;
 8000aee:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000af0:	6953      	ldr	r3, [r2, #20]
 8000af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af6:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[11]();
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <EXTI15_10_IRQHandler+0xcc>)
 8000afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afc:	4798      	blx	r3
}
 8000afe:	e03e      	b.n	8000b7e <EXTI15_10_IRQHandler+0xc2>
	}else if(EXTI->PR.bits.PR12){
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d008      	beq.n	8000b20 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR.bits.PR12 = 0b1;
 8000b0e:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b10:	6953      	ldr	r3, [r2, #20]
 8000b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b16:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[12]();
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <EXTI15_10_IRQHandler+0xcc>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4798      	blx	r3
}
 8000b1e:	e02e      	b.n	8000b7e <EXTI15_10_IRQHandler+0xc2>
	}else if(EXTI->PR.bits.PR13){
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR.bits.PR13 = 0b1;
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b30:	6953      	ldr	r3, [r2, #20]
 8000b32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b36:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[13]();
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <EXTI15_10_IRQHandler+0xcc>)
 8000b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3c:	4798      	blx	r3
}
 8000b3e:	e01e      	b.n	8000b7e <EXTI15_10_IRQHandler+0xc2>
	}else if(EXTI->PR.bits.PR14){
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR.bits.PR14 = 0b1;
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b50:	6953      	ldr	r3, [r2, #20]
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[14]();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <EXTI15_10_IRQHandler+0xcc>)
 8000b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5c:	4798      	blx	r3
}
 8000b5e:	e00e      	b.n	8000b7e <EXTI15_10_IRQHandler+0xc2>
	}else if(EXTI->PR.bits.PR15){
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR.bits.PR15 = 0b1;
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <EXTI15_10_IRQHandler+0xc8>)
 8000b70:	6953      	ldr	r3, [r2, #20]
 8000b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b76:	6153      	str	r3, [r2, #20]
		GP_IRQHanderler[15]();
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <EXTI15_10_IRQHandler+0xcc>)
 8000b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7c:	4798      	blx	r3
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010400 	.word	0x40010400
 8000b88:	20000038 	.word	0x20000038

08000b8c <MCAL_GPIO_init>:
 * @param [in] 	-GPIOx: x can be (A...E) to select the GPIO peripheral.
 * @param [in] 	-cfg: pointer to GPIO_config that contains pin/port confiquration.
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_init(GPIO_typedef * GPIOx,GPIO_config * cfg){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	switch(cfg->GPIO_PinNumber){
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b10      	cmp	r3, #16
 8000b9c:	f201 8201 	bhi.w	8001fa2 <MCAL_GPIO_init+0x1416>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <MCAL_GPIO_init+0x1c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bed 	.word	0x08000bed
 8000bac:	08000d07 	.word	0x08000d07
 8000bb0:	08000e23 	.word	0x08000e23
 8000bb4:	08000f3f 	.word	0x08000f3f
 8000bb8:	0800105b 	.word	0x0800105b
 8000bbc:	08001177 	.word	0x08001177
 8000bc0:	08001293 	.word	0x08001293
 8000bc4:	080013af 	.word	0x080013af
 8000bc8:	080014cb 	.word	0x080014cb
 8000bcc:	080015e7 	.word	0x080015e7
 8000bd0:	08001703 	.word	0x08001703
 8000bd4:	0800181d 	.word	0x0800181d
 8000bd8:	08001935 	.word	0x08001935
 8000bdc:	08001a4d 	.word	0x08001a4d
 8000be0:	08001b65 	.word	0x08001b65
 8000be4:	08001c7d 	.word	0x08001c7d
 8000be8:	08001d95 	.word	0x08001d95
	case GPIO_PIN0:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d106      	bne.n	8000c02 <MCAL_GPIO_init+0x76>
			GPIOx->CRL.bits.MODE0 = 0b01;
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	f361 0301 	bfi	r3, r1, #0, #2
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e013      	b.n	8000c2a <MCAL_GPIO_init+0x9e>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d106      	bne.n	8000c18 <MCAL_GPIO_init+0x8c>
			GPIOx->CRL.bits.MODE0 = 0b010;
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	2102      	movs	r1, #2
 8000c10:	f361 0301 	bfi	r3, r1, #0, #2
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e008      	b.n	8000c2a <MCAL_GPIO_init+0x9e>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d104      	bne.n	8000c2a <MCAL_GPIO_init+0x9e>
			GPIOx->CRL.bits.MODE0 = 0b11;
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6813      	ldr	r3, [r2, #0]
 8000c24:	f043 0303 	orr.w	r3, r3, #3
 8000c28:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	785b      	ldrb	r3, [r3, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <MCAL_GPIO_init+0xbe>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d007      	beq.n	8000c4a <MCAL_GPIO_init+0xbe>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d003      	beq.n	8000c4a <MCAL_GPIO_init+0xbe>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d104      	bne.n	8000c54 <MCAL_GPIO_init+0xc8>
			GPIOx->CRL.bits.MODE0 = 0b00;
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6813      	ldr	r3, [r2, #0]
 8000c4e:	f36f 0301 	bfc	r3, #0, #2
 8000c52:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	785b      	ldrb	r3, [r3, #1]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	f201 8181 	bhi.w	8001f60 <MCAL_GPIO_init+0x13d4>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <MCAL_GPIO_init+0xd8>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c85 	.word	0x08000c85
 8000c68:	08000c91 	.word	0x08000c91
 8000c6c:	08000c9f 	.word	0x08000c9f
 8000c70:	08000cb7 	.word	0x08000cb7
 8000c74:	08000ccf 	.word	0x08000ccf
 8000c78:	08000cdb 	.word	0x08000cdb
 8000c7c:	08000ce9 	.word	0x08000ce9
 8000c80:	08000cf7 	.word	0x08000cf7
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF0 = 0b00;
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6813      	ldr	r3, [r2, #0]
 8000c88:	f36f 0383 	bfc	r3, #2, #2
 8000c8c:	6013      	str	r3, [r2, #0]
			break;
 8000c8e:	e038      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF0 = 0b01;
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	6813      	ldr	r3, [r2, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	f361 0383 	bfi	r3, r1, #2, #2
 8000c9a:	6013      	str	r3, [r2, #0]
			break;
 8000c9c:	e031      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF0 = 0b10;
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	f361 0383 	bfi	r3, r1, #2, #2
 8000ca8:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS0 = 0b1;
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6913      	ldr	r3, [r2, #16]
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6113      	str	r3, [r2, #16]
			break;
 8000cb4:	e025      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF0 = 0b10;
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6813      	ldr	r3, [r2, #0]
 8000cba:	2102      	movs	r1, #2
 8000cbc:	f361 0383 	bfi	r3, r1, #2, #2
 8000cc0:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR0  = 0b1;
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6953      	ldr	r3, [r2, #20]
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6153      	str	r3, [r2, #20]
			break;
 8000ccc:	e019      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF0 = 0b00;
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6813      	ldr	r3, [r2, #0]
 8000cd2:	f36f 0383 	bfc	r3, #2, #2
 8000cd6:	6013      	str	r3, [r2, #0]
			break;
 8000cd8:	e013      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF0 = 0b01;
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	f361 0383 	bfi	r3, r1, #2, #2
 8000ce4:	6013      	str	r3, [r2, #0]
			break;
 8000ce6:	e00c      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF0 = 0b10;
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	2102      	movs	r1, #2
 8000cee:	f361 0383 	bfi	r3, r1, #2, #2
 8000cf2:	6013      	str	r3, [r2, #0]
			break;
 8000cf4:	e005      	b.n	8000d02 <MCAL_GPIO_init+0x176>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF0 = 0b11;
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	f043 030c 	orr.w	r3, r3, #12
 8000cfe:	6013      	str	r3, [r2, #0]
			break;
 8000d00:	bf00      	nop
		}
		break;
 8000d02:	f001 b92d 	b.w	8001f60 <MCAL_GPIO_init+0x13d4>

	case GPIO_PIN1:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d106      	bne.n	8000d1c <MCAL_GPIO_init+0x190>
			GPIOx->CRL.bits.MODE1 = 0b01;
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	2101      	movs	r1, #1
 8000d14:	f361 1305 	bfi	r3, r1, #4, #2
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e013      	b.n	8000d44 <MCAL_GPIO_init+0x1b8>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d106      	bne.n	8000d32 <MCAL_GPIO_init+0x1a6>
			GPIOx->CRL.bits.MODE1 = 0b010;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	2102      	movs	r1, #2
 8000d2a:	f361 1305 	bfi	r3, r1, #4, #2
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e008      	b.n	8000d44 <MCAL_GPIO_init+0x1b8>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d104      	bne.n	8000d44 <MCAL_GPIO_init+0x1b8>
			GPIOx->CRL.bits.MODE1 = 0b11;
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000d42:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00b      	beq.n	8000d64 <MCAL_GPIO_init+0x1d8>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d007      	beq.n	8000d64 <MCAL_GPIO_init+0x1d8>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	785b      	ldrb	r3, [r3, #1]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d003      	beq.n	8000d64 <MCAL_GPIO_init+0x1d8>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d104      	bne.n	8000d6e <MCAL_GPIO_init+0x1e2>
			GPIOx->CRL.bits.MODE1 = 0b00;
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	f36f 1305 	bfc	r3, #4, #2
 8000d6c:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	2b07      	cmp	r3, #7
 8000d74:	f201 80f6 	bhi.w	8001f64 <MCAL_GPIO_init+0x13d8>
 8000d78:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <MCAL_GPIO_init+0x1f4>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000da1 	.word	0x08000da1
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dbb 	.word	0x08000dbb
 8000d8c:	08000dd3 	.word	0x08000dd3
 8000d90:	08000deb 	.word	0x08000deb
 8000d94:	08000df7 	.word	0x08000df7
 8000d98:	08000e05 	.word	0x08000e05
 8000d9c:	08000e13 	.word	0x08000e13
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF1 = 0b00;
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6813      	ldr	r3, [r2, #0]
 8000da4:	f36f 1387 	bfc	r3, #6, #2
 8000da8:	6013      	str	r3, [r2, #0]
			break;
 8000daa:	e038      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF1 = 0b01;
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	f361 1387 	bfi	r3, r1, #6, #2
 8000db6:	6013      	str	r3, [r2, #0]
			break;
 8000db8:	e031      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF1 = 0b10;
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6813      	ldr	r3, [r2, #0]
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	f361 1387 	bfi	r3, r1, #6, #2
 8000dc4:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS1 = 0b1;
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6913      	ldr	r3, [r2, #16]
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6113      	str	r3, [r2, #16]
			break;
 8000dd0:	e025      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF1 = 0b10;
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6813      	ldr	r3, [r2, #0]
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	f361 1387 	bfi	r3, r1, #6, #2
 8000ddc:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR1  = 0b1;
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6953      	ldr	r3, [r2, #20]
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6153      	str	r3, [r2, #20]
			break;
 8000de8:	e019      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF1 = 0b00;
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f36f 1387 	bfc	r3, #6, #2
 8000df2:	6013      	str	r3, [r2, #0]
			break;
 8000df4:	e013      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF1 = 0b01;
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6813      	ldr	r3, [r2, #0]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	f361 1387 	bfi	r3, r1, #6, #2
 8000e00:	6013      	str	r3, [r2, #0]
			break;
 8000e02:	e00c      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF1 = 0b10;
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	2102      	movs	r1, #2
 8000e0a:	f361 1387 	bfi	r3, r1, #6, #2
 8000e0e:	6013      	str	r3, [r2, #0]
			break;
 8000e10:	e005      	b.n	8000e1e <MCAL_GPIO_init+0x292>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF1 = 0b11;
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e1a:	6013      	str	r3, [r2, #0]
			break;
 8000e1c:	bf00      	nop
		}
		break;
 8000e1e:	f001 b8a1 	b.w	8001f64 <MCAL_GPIO_init+0x13d8>
	case GPIO_PIN2:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d106      	bne.n	8000e38 <MCAL_GPIO_init+0x2ac>
			GPIOx->CRL.bits.MODE2 = 0b01;
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6813      	ldr	r3, [r2, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	f361 2309 	bfi	r3, r1, #8, #2
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e013      	b.n	8000e60 <MCAL_GPIO_init+0x2d4>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	789b      	ldrb	r3, [r3, #2]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d106      	bne.n	8000e4e <MCAL_GPIO_init+0x2c2>
			GPIOx->CRL.bits.MODE2 = 0b010;
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	2102      	movs	r1, #2
 8000e46:	f361 2309 	bfi	r3, r1, #8, #2
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e008      	b.n	8000e60 <MCAL_GPIO_init+0x2d4>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d104      	bne.n	8000e60 <MCAL_GPIO_init+0x2d4>
			GPIOx->CRL.bits.MODE2 = 0b11;
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6813      	ldr	r3, [r2, #0]
 8000e5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e5e:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00b      	beq.n	8000e80 <MCAL_GPIO_init+0x2f4>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	785b      	ldrb	r3, [r3, #1]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d007      	beq.n	8000e80 <MCAL_GPIO_init+0x2f4>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d003      	beq.n	8000e80 <MCAL_GPIO_init+0x2f4>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d104      	bne.n	8000e8a <MCAL_GPIO_init+0x2fe>
			GPIOx->CRL.bits.MODE2 = 0b00;
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	f36f 2309 	bfc	r3, #8, #2
 8000e88:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	785b      	ldrb	r3, [r3, #1]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	f201 806a 	bhi.w	8001f68 <MCAL_GPIO_init+0x13dc>
 8000e94:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <MCAL_GPIO_init+0x310>)
 8000e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9a:	bf00      	nop
 8000e9c:	08000ebd 	.word	0x08000ebd
 8000ea0:	08000ec9 	.word	0x08000ec9
 8000ea4:	08000ed7 	.word	0x08000ed7
 8000ea8:	08000eef 	.word	0x08000eef
 8000eac:	08000f07 	.word	0x08000f07
 8000eb0:	08000f13 	.word	0x08000f13
 8000eb4:	08000f21 	.word	0x08000f21
 8000eb8:	08000f2f 	.word	0x08000f2f
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF2 = 0b00;
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	f36f 238b 	bfc	r3, #10, #2
 8000ec4:	6013      	str	r3, [r2, #0]
			break;
 8000ec6:	e038      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF2 = 0b01;
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	f361 238b 	bfi	r3, r1, #10, #2
 8000ed2:	6013      	str	r3, [r2, #0]
			break;
 8000ed4:	e031      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF2 = 0b10;
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	2102      	movs	r1, #2
 8000edc:	f361 238b 	bfi	r3, r1, #10, #2
 8000ee0:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS2 = 0b1;
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	6913      	ldr	r3, [r2, #16]
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6113      	str	r3, [r2, #16]
			break;
 8000eec:	e025      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF2 = 0b10;
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6813      	ldr	r3, [r2, #0]
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	f361 238b 	bfi	r3, r1, #10, #2
 8000ef8:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR2  = 0b1;
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6953      	ldr	r3, [r2, #20]
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6153      	str	r3, [r2, #20]
			break;
 8000f04:	e019      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF2 = 0b00;
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	f36f 238b 	bfc	r3, #10, #2
 8000f0e:	6013      	str	r3, [r2, #0]
			break;
 8000f10:	e013      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF2 = 0b01;
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6813      	ldr	r3, [r2, #0]
 8000f16:	2101      	movs	r1, #1
 8000f18:	f361 238b 	bfi	r3, r1, #10, #2
 8000f1c:	6013      	str	r3, [r2, #0]
			break;
 8000f1e:	e00c      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF2 = 0b10;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	2102      	movs	r1, #2
 8000f26:	f361 238b 	bfi	r3, r1, #10, #2
 8000f2a:	6013      	str	r3, [r2, #0]
			break;
 8000f2c:	e005      	b.n	8000f3a <MCAL_GPIO_init+0x3ae>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF2 = 0b11;
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000f36:	6013      	str	r3, [r2, #0]
			break;
 8000f38:	bf00      	nop
		}
		break;
 8000f3a:	f001 b815 	b.w	8001f68 <MCAL_GPIO_init+0x13dc>

	case GPIO_PIN3:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	789b      	ldrb	r3, [r3, #2]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d106      	bne.n	8000f54 <MCAL_GPIO_init+0x3c8>
			GPIOx->CRL.bits.MODE3 = 0b01;
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6813      	ldr	r3, [r2, #0]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	f361 330d 	bfi	r3, r1, #12, #2
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e013      	b.n	8000f7c <MCAL_GPIO_init+0x3f0>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	789b      	ldrb	r3, [r3, #2]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d106      	bne.n	8000f6a <MCAL_GPIO_init+0x3de>
			GPIOx->CRL.bits.MODE3 = 0b010;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6813      	ldr	r3, [r2, #0]
 8000f60:	2102      	movs	r1, #2
 8000f62:	f361 330d 	bfi	r3, r1, #12, #2
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e008      	b.n	8000f7c <MCAL_GPIO_init+0x3f0>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	789b      	ldrb	r3, [r3, #2]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d104      	bne.n	8000f7c <MCAL_GPIO_init+0x3f0>
			GPIOx->CRL.bits.MODE3 = 0b11;
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f7a:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	785b      	ldrb	r3, [r3, #1]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <MCAL_GPIO_init+0x410>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	785b      	ldrb	r3, [r3, #1]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d007      	beq.n	8000f9c <MCAL_GPIO_init+0x410>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d003      	beq.n	8000f9c <MCAL_GPIO_init+0x410>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d104      	bne.n	8000fa6 <MCAL_GPIO_init+0x41a>
			GPIOx->CRL.bits.MODE3 = 0b00;
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	f36f 330d 	bfc	r3, #12, #2
 8000fa4:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	2b07      	cmp	r3, #7
 8000fac:	f200 87de 	bhi.w	8001f6c <MCAL_GPIO_init+0x13e0>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <MCAL_GPIO_init+0x42c>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fd9 	.word	0x08000fd9
 8000fbc:	08000fe5 	.word	0x08000fe5
 8000fc0:	08000ff3 	.word	0x08000ff3
 8000fc4:	0800100b 	.word	0x0800100b
 8000fc8:	08001023 	.word	0x08001023
 8000fcc:	0800102f 	.word	0x0800102f
 8000fd0:	0800103d 	.word	0x0800103d
 8000fd4:	0800104b 	.word	0x0800104b
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF3 = 0b00;
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	f36f 338f 	bfc	r3, #14, #2
 8000fe0:	6013      	str	r3, [r2, #0]
			break;
 8000fe2:	e038      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF3 = 0b01;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	f361 338f 	bfi	r3, r1, #14, #2
 8000fee:	6013      	str	r3, [r2, #0]
			break;
 8000ff0:	e031      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF3 = 0b10;
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	f361 338f 	bfi	r3, r1, #14, #2
 8000ffc:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS3 = 0b1;
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6913      	ldr	r3, [r2, #16]
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6113      	str	r3, [r2, #16]
			break;
 8001008:	e025      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF3 = 0b10;
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	2102      	movs	r1, #2
 8001010:	f361 338f 	bfi	r3, r1, #14, #2
 8001014:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR3  = 0b1;
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6953      	ldr	r3, [r2, #20]
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6153      	str	r3, [r2, #20]
			break;
 8001020:	e019      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF3 = 0b00;
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	f36f 338f 	bfc	r3, #14, #2
 800102a:	6013      	str	r3, [r2, #0]
			break;
 800102c:	e013      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF3 = 0b01;
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6813      	ldr	r3, [r2, #0]
 8001032:	2101      	movs	r1, #1
 8001034:	f361 338f 	bfi	r3, r1, #14, #2
 8001038:	6013      	str	r3, [r2, #0]
			break;
 800103a:	e00c      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF3 = 0b10;
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	2102      	movs	r1, #2
 8001042:	f361 338f 	bfi	r3, r1, #14, #2
 8001046:	6013      	str	r3, [r2, #0]
			break;
 8001048:	e005      	b.n	8001056 <MCAL_GPIO_init+0x4ca>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF3 = 0b11;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001052:	6013      	str	r3, [r2, #0]
			break;
 8001054:	bf00      	nop
		}
		break;
 8001056:	f000 bf89 	b.w	8001f6c <MCAL_GPIO_init+0x13e0>

	case GPIO_PIN4:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	789b      	ldrb	r3, [r3, #2]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d106      	bne.n	8001070 <MCAL_GPIO_init+0x4e4>
			GPIOx->CRL.bits.MODE4 = 0b01;
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	2101      	movs	r1, #1
 8001068:	f361 4311 	bfi	r3, r1, #16, #2
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e013      	b.n	8001098 <MCAL_GPIO_init+0x50c>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d106      	bne.n	8001086 <MCAL_GPIO_init+0x4fa>
			GPIOx->CRL.bits.MODE4 = 0b010;
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	2102      	movs	r1, #2
 800107e:	f361 4311 	bfi	r3, r1, #16, #2
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e008      	b.n	8001098 <MCAL_GPIO_init+0x50c>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d104      	bne.n	8001098 <MCAL_GPIO_init+0x50c>
			GPIOx->CRL.bits.MODE4 = 0b11;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001096:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <MCAL_GPIO_init+0x52c>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d007      	beq.n	80010b8 <MCAL_GPIO_init+0x52c>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d003      	beq.n	80010b8 <MCAL_GPIO_init+0x52c>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d104      	bne.n	80010c2 <MCAL_GPIO_init+0x536>
			GPIOx->CRL.bits.MODE4 = 0b00;
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f36f 4311 	bfc	r3, #16, #2
 80010c0:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	f200 8752 	bhi.w	8001f70 <MCAL_GPIO_init+0x13e4>
 80010cc:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <MCAL_GPIO_init+0x548>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	080010f5 	.word	0x080010f5
 80010d8:	08001101 	.word	0x08001101
 80010dc:	0800110f 	.word	0x0800110f
 80010e0:	08001127 	.word	0x08001127
 80010e4:	0800113f 	.word	0x0800113f
 80010e8:	0800114b 	.word	0x0800114b
 80010ec:	08001159 	.word	0x08001159
 80010f0:	08001167 	.word	0x08001167
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF4 = 0b00;
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	f36f 4393 	bfc	r3, #18, #2
 80010fc:	6013      	str	r3, [r2, #0]
			break;
 80010fe:	e038      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF4 = 0b01;
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	f361 4393 	bfi	r3, r1, #18, #2
 800110a:	6013      	str	r3, [r2, #0]
			break;
 800110c:	e031      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF4 = 0b10;
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	2102      	movs	r1, #2
 8001114:	f361 4393 	bfi	r3, r1, #18, #2
 8001118:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS4 = 0b1;
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6913      	ldr	r3, [r2, #16]
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6113      	str	r3, [r2, #16]
			break;
 8001124:	e025      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF4 = 0b10;
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6813      	ldr	r3, [r2, #0]
 800112a:	2102      	movs	r1, #2
 800112c:	f361 4393 	bfi	r3, r1, #18, #2
 8001130:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR4  = 0b1;
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6953      	ldr	r3, [r2, #20]
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6153      	str	r3, [r2, #20]
			break;
 800113c:	e019      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF4 = 0b00;
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6813      	ldr	r3, [r2, #0]
 8001142:	f36f 4393 	bfc	r3, #18, #2
 8001146:	6013      	str	r3, [r2, #0]
			break;
 8001148:	e013      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF4 = 0b01;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	2101      	movs	r1, #1
 8001150:	f361 4393 	bfi	r3, r1, #18, #2
 8001154:	6013      	str	r3, [r2, #0]
			break;
 8001156:	e00c      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF4 = 0b10;
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	2102      	movs	r1, #2
 800115e:	f361 4393 	bfi	r3, r1, #18, #2
 8001162:	6013      	str	r3, [r2, #0]
			break;
 8001164:	e005      	b.n	8001172 <MCAL_GPIO_init+0x5e6>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF4 = 0b11;
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800116e:	6013      	str	r3, [r2, #0]
			break;
 8001170:	bf00      	nop
		}
		break;
 8001172:	f000 befd 	b.w	8001f70 <MCAL_GPIO_init+0x13e4>

	case GPIO_PIN5:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	789b      	ldrb	r3, [r3, #2]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d106      	bne.n	800118c <MCAL_GPIO_init+0x600>
			GPIOx->CRL.bits.MODE5 = 0b01;
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	2101      	movs	r1, #1
 8001184:	f361 5315 	bfi	r3, r1, #20, #2
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e013      	b.n	80011b4 <MCAL_GPIO_init+0x628>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d106      	bne.n	80011a2 <MCAL_GPIO_init+0x616>
			GPIOx->CRL.bits.MODE5 = 0b010;
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6813      	ldr	r3, [r2, #0]
 8001198:	2102      	movs	r1, #2
 800119a:	f361 5315 	bfi	r3, r1, #20, #2
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e008      	b.n	80011b4 <MCAL_GPIO_init+0x628>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d104      	bne.n	80011b4 <MCAL_GPIO_init+0x628>
			GPIOx->CRL.bits.MODE5 = 0b11;
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80011b2:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <MCAL_GPIO_init+0x648>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d007      	beq.n	80011d4 <MCAL_GPIO_init+0x648>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d003      	beq.n	80011d4 <MCAL_GPIO_init+0x648>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d104      	bne.n	80011de <MCAL_GPIO_init+0x652>
			GPIOx->CRL.bits.MODE5 = 0b00;
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f36f 5315 	bfc	r3, #20, #2
 80011dc:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	f200 86c6 	bhi.w	8001f74 <MCAL_GPIO_init+0x13e8>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <MCAL_GPIO_init+0x664>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001211 	.word	0x08001211
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	0800122b 	.word	0x0800122b
 80011fc:	08001243 	.word	0x08001243
 8001200:	0800125b 	.word	0x0800125b
 8001204:	08001267 	.word	0x08001267
 8001208:	08001275 	.word	0x08001275
 800120c:	08001283 	.word	0x08001283
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF5 = 0b00;
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f36f 5397 	bfc	r3, #22, #2
 8001218:	6013      	str	r3, [r2, #0]
			break;
 800121a:	e038      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF5 = 0b01;
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6813      	ldr	r3, [r2, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	f361 5397 	bfi	r3, r1, #22, #2
 8001226:	6013      	str	r3, [r2, #0]
			break;
 8001228:	e031      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF5 = 0b10;
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	2102      	movs	r1, #2
 8001230:	f361 5397 	bfi	r3, r1, #22, #2
 8001234:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS5 = 0b1;
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6913      	ldr	r3, [r2, #16]
 800123a:	f043 0320 	orr.w	r3, r3, #32
 800123e:	6113      	str	r3, [r2, #16]
			break;
 8001240:	e025      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF5 = 0b10;
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	2102      	movs	r1, #2
 8001248:	f361 5397 	bfi	r3, r1, #22, #2
 800124c:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR5  = 0b1;
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6953      	ldr	r3, [r2, #20]
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6153      	str	r3, [r2, #20]
			break;
 8001258:	e019      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF5 = 0b00;
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	f36f 5397 	bfc	r3, #22, #2
 8001262:	6013      	str	r3, [r2, #0]
			break;
 8001264:	e013      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF5 = 0b01;
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	2101      	movs	r1, #1
 800126c:	f361 5397 	bfi	r3, r1, #22, #2
 8001270:	6013      	str	r3, [r2, #0]
			break;
 8001272:	e00c      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF5 = 0b10;
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	2102      	movs	r1, #2
 800127a:	f361 5397 	bfi	r3, r1, #22, #2
 800127e:	6013      	str	r3, [r2, #0]
			break;
 8001280:	e005      	b.n	800128e <MCAL_GPIO_init+0x702>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF5 = 0b11;
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6813      	ldr	r3, [r2, #0]
 8001286:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800128a:	6013      	str	r3, [r2, #0]
			break;
 800128c:	bf00      	nop
		}
		break;
 800128e:	f000 be71 	b.w	8001f74 <MCAL_GPIO_init+0x13e8>

	case GPIO_PIN6:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	789b      	ldrb	r3, [r3, #2]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d106      	bne.n	80012a8 <MCAL_GPIO_init+0x71c>
			GPIOx->CRL.bits.MODE6 = 0b01;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	f361 6319 	bfi	r3, r1, #24, #2
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e013      	b.n	80012d0 <MCAL_GPIO_init+0x744>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	789b      	ldrb	r3, [r3, #2]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d106      	bne.n	80012be <MCAL_GPIO_init+0x732>
			GPIOx->CRL.bits.MODE6 = 0b010;
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	2102      	movs	r1, #2
 80012b6:	f361 6319 	bfi	r3, r1, #24, #2
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e008      	b.n	80012d0 <MCAL_GPIO_init+0x744>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d104      	bne.n	80012d0 <MCAL_GPIO_init+0x744>
			GPIOx->CRL.bits.MODE6 = 0b11;
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6813      	ldr	r3, [r2, #0]
 80012ca:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80012ce:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <MCAL_GPIO_init+0x764>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d007      	beq.n	80012f0 <MCAL_GPIO_init+0x764>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	785b      	ldrb	r3, [r3, #1]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d003      	beq.n	80012f0 <MCAL_GPIO_init+0x764>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d104      	bne.n	80012fa <MCAL_GPIO_init+0x76e>
			GPIOx->CRL.bits.MODE6 = 0b00;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6813      	ldr	r3, [r2, #0]
 80012f4:	f36f 6319 	bfc	r3, #24, #2
 80012f8:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	2b07      	cmp	r3, #7
 8001300:	f200 863a 	bhi.w	8001f78 <MCAL_GPIO_init+0x13ec>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <MCAL_GPIO_init+0x780>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800132d 	.word	0x0800132d
 8001310:	08001339 	.word	0x08001339
 8001314:	08001347 	.word	0x08001347
 8001318:	0800135f 	.word	0x0800135f
 800131c:	08001377 	.word	0x08001377
 8001320:	08001383 	.word	0x08001383
 8001324:	08001391 	.word	0x08001391
 8001328:	0800139f 	.word	0x0800139f
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF6 = 0b00;
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f36f 639b 	bfc	r3, #26, #2
 8001334:	6013      	str	r3, [r2, #0]
			break;
 8001336:	e038      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF6 = 0b01;
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	f361 639b 	bfi	r3, r1, #26, #2
 8001342:	6013      	str	r3, [r2, #0]
			break;
 8001344:	e031      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF6 = 0b10;
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	2102      	movs	r1, #2
 800134c:	f361 639b 	bfi	r3, r1, #26, #2
 8001350:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS6 = 0b1;
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6913      	ldr	r3, [r2, #16]
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	6113      	str	r3, [r2, #16]
			break;
 800135c:	e025      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF6 = 0b10;
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	2102      	movs	r1, #2
 8001364:	f361 639b 	bfi	r3, r1, #26, #2
 8001368:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR6  = 0b1;
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6953      	ldr	r3, [r2, #20]
 800136e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001372:	6153      	str	r3, [r2, #20]
			break;
 8001374:	e019      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF6 = 0b00;
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f36f 639b 	bfc	r3, #26, #2
 800137e:	6013      	str	r3, [r2, #0]
			break;
 8001380:	e013      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF6 = 0b01;
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	f361 639b 	bfi	r3, r1, #26, #2
 800138c:	6013      	str	r3, [r2, #0]
			break;
 800138e:	e00c      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF6 = 0b10;
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	2102      	movs	r1, #2
 8001396:	f361 639b 	bfi	r3, r1, #26, #2
 800139a:	6013      	str	r3, [r2, #0]
			break;
 800139c:	e005      	b.n	80013aa <MCAL_GPIO_init+0x81e>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF6 = 0b11;
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6813      	ldr	r3, [r2, #0]
 80013a2:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80013a6:	6013      	str	r3, [r2, #0]
			break;
 80013a8:	bf00      	nop
		}
		break;
 80013aa:	f000 bde5 	b.w	8001f78 <MCAL_GPIO_init+0x13ec>

	case GPIO_PIN7:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	789b      	ldrb	r3, [r3, #2]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d106      	bne.n	80013c4 <MCAL_GPIO_init+0x838>
			GPIOx->CRL.bits.MODE7 = 0b01;
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	f361 731d 	bfi	r3, r1, #28, #2
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e013      	b.n	80013ec <MCAL_GPIO_init+0x860>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d106      	bne.n	80013da <MCAL_GPIO_init+0x84e>
			GPIOx->CRL.bits.MODE7 = 0b010;
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	2102      	movs	r1, #2
 80013d2:	f361 731d 	bfi	r3, r1, #28, #2
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e008      	b.n	80013ec <MCAL_GPIO_init+0x860>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d104      	bne.n	80013ec <MCAL_GPIO_init+0x860>
			GPIOx->CRL.bits.MODE7 = 0b11;
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6813      	ldr	r3, [r2, #0]
 80013e6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80013ea:	6013      	str	r3, [r2, #0]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00b      	beq.n	800140c <MCAL_GPIO_init+0x880>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d007      	beq.n	800140c <MCAL_GPIO_init+0x880>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d003      	beq.n	800140c <MCAL_GPIO_init+0x880>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d104      	bne.n	8001416 <MCAL_GPIO_init+0x88a>
			GPIOx->CRL.bits.MODE7 = 0b00;
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6813      	ldr	r3, [r2, #0]
 8001410:	f36f 731d 	bfc	r3, #28, #2
 8001414:	6013      	str	r3, [r2, #0]

		switch(cfg->GPIO_PinMode){
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	2b07      	cmp	r3, #7
 800141c:	f200 85ae 	bhi.w	8001f7c <MCAL_GPIO_init+0x13f0>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <MCAL_GPIO_init+0x89c>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001449 	.word	0x08001449
 800142c:	08001455 	.word	0x08001455
 8001430:	08001463 	.word	0x08001463
 8001434:	0800147b 	.word	0x0800147b
 8001438:	08001493 	.word	0x08001493
 800143c:	0800149f 	.word	0x0800149f
 8001440:	080014ad 	.word	0x080014ad
 8001444:	080014bb 	.word	0x080014bb
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.bits.CNF7 = 0b00;
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	f36f 739f 	bfc	r3, #30, #2
 8001450:	6013      	str	r3, [r2, #0]
			break;
 8001452:	e038      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.bits.CNF7 = 0b01;
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6813      	ldr	r3, [r2, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	f361 739f 	bfi	r3, r1, #30, #2
 800145e:	6013      	str	r3, [r2, #0]
			break;
 8001460:	e031      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.bits.CNF7 = 0b10;
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	2102      	movs	r1, #2
 8001468:	f361 739f 	bfi	r3, r1, #30, #2
 800146c:	6013      	str	r3, [r2, #0]
			GPIOx->BSRR.bits.BS7 = 0b1;
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6913      	ldr	r3, [r2, #16]
 8001472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001476:	6113      	str	r3, [r2, #16]
			break;
 8001478:	e025      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.bits.CNF7 = 0b10;
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	2102      	movs	r1, #2
 8001480:	f361 739f 	bfi	r3, r1, #30, #2
 8001484:	6013      	str	r3, [r2, #0]
			GPIOx->BRR.bits.BR7  = 0b1;
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6953      	ldr	r3, [r2, #20]
 800148a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148e:	6153      	str	r3, [r2, #20]
			break;
 8001490:	e019      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRL.bits.CNF7 = 0b00;
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	f36f 739f 	bfc	r3, #30, #2
 800149a:	6013      	str	r3, [r2, #0]
			break;
 800149c:	e013      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRL.bits.CNF7 = 0b01;
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	f361 739f 	bfi	r3, r1, #30, #2
 80014a8:	6013      	str	r3, [r2, #0]
			break;
 80014aa:	e00c      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRL.bits.CNF7 = 0b10;
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	2102      	movs	r1, #2
 80014b2:	f361 739f 	bfi	r3, r1, #30, #2
 80014b6:	6013      	str	r3, [r2, #0]
			break;
 80014b8:	e005      	b.n	80014c6 <MCAL_GPIO_init+0x93a>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRL.bits.CNF7 = 0b11;
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80014c2:	6013      	str	r3, [r2, #0]
			break;
 80014c4:	bf00      	nop
		}
		break;
 80014c6:	f000 bd59 	b.w	8001f7c <MCAL_GPIO_init+0x13f0>
	case GPIO_PIN8:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	789b      	ldrb	r3, [r3, #2]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d106      	bne.n	80014e0 <MCAL_GPIO_init+0x954>
			GPIOx->CRH.bits.MODE8 = 0b01;
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6853      	ldr	r3, [r2, #4]
 80014d6:	2101      	movs	r1, #1
 80014d8:	f361 0301 	bfi	r3, r1, #0, #2
 80014dc:	6053      	str	r3, [r2, #4]
 80014de:	e013      	b.n	8001508 <MCAL_GPIO_init+0x97c>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d106      	bne.n	80014f6 <MCAL_GPIO_init+0x96a>
			GPIOx->CRH.bits.MODE8 = 0b010;
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6853      	ldr	r3, [r2, #4]
 80014ec:	2102      	movs	r1, #2
 80014ee:	f361 0301 	bfi	r3, r1, #0, #2
 80014f2:	6053      	str	r3, [r2, #4]
 80014f4:	e008      	b.n	8001508 <MCAL_GPIO_init+0x97c>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d104      	bne.n	8001508 <MCAL_GPIO_init+0x97c>
			GPIOx->CRH.bits.MODE8 = 0b11;
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6853      	ldr	r3, [r2, #4]
 8001502:	f043 0303 	orr.w	r3, r3, #3
 8001506:	6053      	str	r3, [r2, #4]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00b      	beq.n	8001528 <MCAL_GPIO_init+0x99c>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d007      	beq.n	8001528 <MCAL_GPIO_init+0x99c>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d003      	beq.n	8001528 <MCAL_GPIO_init+0x99c>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d104      	bne.n	8001532 <MCAL_GPIO_init+0x9a6>
			GPIOx->CRH.bits.MODE8 = 0b00;
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6853      	ldr	r3, [r2, #4]
 800152c:	f36f 0301 	bfc	r3, #0, #2
 8001530:	6053      	str	r3, [r2, #4]

		switch(cfg->GPIO_PinMode){
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	2b07      	cmp	r3, #7
 8001538:	f200 8522 	bhi.w	8001f80 <MCAL_GPIO_init+0x13f4>
 800153c:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <MCAL_GPIO_init+0x9b8>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001565 	.word	0x08001565
 8001548:	08001571 	.word	0x08001571
 800154c:	0800157f 	.word	0x0800157f
 8001550:	08001597 	.word	0x08001597
 8001554:	080015af 	.word	0x080015af
 8001558:	080015bb 	.word	0x080015bb
 800155c:	080015c9 	.word	0x080015c9
 8001560:	080015d7 	.word	0x080015d7
		case GPIO_MODE_ANALOG:
			GPIOx->CRH.bits.CNF8 = 0b00;
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6853      	ldr	r3, [r2, #4]
 8001568:	f36f 0383 	bfc	r3, #2, #2
 800156c:	6053      	str	r3, [r2, #4]
			break;
 800156e:	e038      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRH.bits.CNF8 = 0b01;
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6853      	ldr	r3, [r2, #4]
 8001574:	2101      	movs	r1, #1
 8001576:	f361 0383 	bfi	r3, r1, #2, #2
 800157a:	6053      	str	r3, [r2, #4]
			break;
 800157c:	e031      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRH.bits.CNF8 = 0b10;
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6853      	ldr	r3, [r2, #4]
 8001582:	2102      	movs	r1, #2
 8001584:	f361 0383 	bfi	r3, r1, #2, #2
 8001588:	6053      	str	r3, [r2, #4]
			GPIOx->BSRR.bits.BS8 = 0b1;
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6913      	ldr	r3, [r2, #16]
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6113      	str	r3, [r2, #16]
			break;
 8001594:	e025      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRH.bits.CNF8 = 0b10;
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6853      	ldr	r3, [r2, #4]
 800159a:	2102      	movs	r1, #2
 800159c:	f361 0383 	bfi	r3, r1, #2, #2
 80015a0:	6053      	str	r3, [r2, #4]
			GPIOx->BRR.bits.BR8  = 0b1;
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6953      	ldr	r3, [r2, #20]
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6153      	str	r3, [r2, #20]
			break;
 80015ac:	e019      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRH.bits.CNF8 = 0b00;
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6853      	ldr	r3, [r2, #4]
 80015b2:	f36f 0383 	bfc	r3, #2, #2
 80015b6:	6053      	str	r3, [r2, #4]
			break;
 80015b8:	e013      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRH.bits.CNF8 = 0b01;
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6853      	ldr	r3, [r2, #4]
 80015be:	2101      	movs	r1, #1
 80015c0:	f361 0383 	bfi	r3, r1, #2, #2
 80015c4:	6053      	str	r3, [r2, #4]
			break;
 80015c6:	e00c      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRH.bits.CNF8 = 0b10;
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6853      	ldr	r3, [r2, #4]
 80015cc:	2102      	movs	r1, #2
 80015ce:	f361 0383 	bfi	r3, r1, #2, #2
 80015d2:	6053      	str	r3, [r2, #4]
			break;
 80015d4:	e005      	b.n	80015e2 <MCAL_GPIO_init+0xa56>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRH.bits.CNF8 = 0b11;
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6853      	ldr	r3, [r2, #4]
 80015da:	f043 030c 	orr.w	r3, r3, #12
 80015de:	6053      	str	r3, [r2, #4]
			break;
 80015e0:	bf00      	nop
		}
		break;
 80015e2:	f000 bccd 	b.w	8001f80 <MCAL_GPIO_init+0x13f4>
	case GPIO_PIN9:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d106      	bne.n	80015fc <MCAL_GPIO_init+0xa70>
			GPIOx->CRH.bits.MODE9 = 0b01;
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6853      	ldr	r3, [r2, #4]
 80015f2:	2101      	movs	r1, #1
 80015f4:	f361 1305 	bfi	r3, r1, #4, #2
 80015f8:	6053      	str	r3, [r2, #4]
 80015fa:	e013      	b.n	8001624 <MCAL_GPIO_init+0xa98>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d106      	bne.n	8001612 <MCAL_GPIO_init+0xa86>
			GPIOx->CRH.bits.MODE9 = 0b010;
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6853      	ldr	r3, [r2, #4]
 8001608:	2102      	movs	r1, #2
 800160a:	f361 1305 	bfi	r3, r1, #4, #2
 800160e:	6053      	str	r3, [r2, #4]
 8001610:	e008      	b.n	8001624 <MCAL_GPIO_init+0xa98>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d104      	bne.n	8001624 <MCAL_GPIO_init+0xa98>
			GPIOx->CRH.bits.MODE9 = 0b11;
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6853      	ldr	r3, [r2, #4]
 800161e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001622:	6053      	str	r3, [r2, #4]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <MCAL_GPIO_init+0xab8>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d007      	beq.n	8001644 <MCAL_GPIO_init+0xab8>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	785b      	ldrb	r3, [r3, #1]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d003      	beq.n	8001644 <MCAL_GPIO_init+0xab8>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d104      	bne.n	800164e <MCAL_GPIO_init+0xac2>
			GPIOx->CRH.bits.MODE9 = 0b00;
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6853      	ldr	r3, [r2, #4]
 8001648:	f36f 1305 	bfc	r3, #4, #2
 800164c:	6053      	str	r3, [r2, #4]

		switch(cfg->GPIO_PinMode){
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	785b      	ldrb	r3, [r3, #1]
 8001652:	2b07      	cmp	r3, #7
 8001654:	f200 8496 	bhi.w	8001f84 <MCAL_GPIO_init+0x13f8>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <MCAL_GPIO_init+0xad4>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001681 	.word	0x08001681
 8001664:	0800168d 	.word	0x0800168d
 8001668:	0800169b 	.word	0x0800169b
 800166c:	080016b3 	.word	0x080016b3
 8001670:	080016cb 	.word	0x080016cb
 8001674:	080016d7 	.word	0x080016d7
 8001678:	080016e5 	.word	0x080016e5
 800167c:	080016f3 	.word	0x080016f3
		case GPIO_MODE_ANALOG:
			GPIOx->CRH.bits.CNF9 = 0b00;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6853      	ldr	r3, [r2, #4]
 8001684:	f36f 1387 	bfc	r3, #6, #2
 8001688:	6053      	str	r3, [r2, #4]
			break;
 800168a:	e038      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRH.bits.CNF9 = 0b01;
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6853      	ldr	r3, [r2, #4]
 8001690:	2101      	movs	r1, #1
 8001692:	f361 1387 	bfi	r3, r1, #6, #2
 8001696:	6053      	str	r3, [r2, #4]
			break;
 8001698:	e031      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRH.bits.CNF9 = 0b10;
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6853      	ldr	r3, [r2, #4]
 800169e:	2102      	movs	r1, #2
 80016a0:	f361 1387 	bfi	r3, r1, #6, #2
 80016a4:	6053      	str	r3, [r2, #4]
			GPIOx->BSRR.bits.BS9 = 0b1;
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6913      	ldr	r3, [r2, #16]
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6113      	str	r3, [r2, #16]
			break;
 80016b0:	e025      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRH.bits.CNF9 = 0b10;
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6853      	ldr	r3, [r2, #4]
 80016b6:	2102      	movs	r1, #2
 80016b8:	f361 1387 	bfi	r3, r1, #6, #2
 80016bc:	6053      	str	r3, [r2, #4]
			GPIOx->BRR.bits.BR9 = 0b1;
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6953      	ldr	r3, [r2, #20]
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	6153      	str	r3, [r2, #20]
			break;
 80016c8:	e019      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRH.bits.CNF9 = 0b00;
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6853      	ldr	r3, [r2, #4]
 80016ce:	f36f 1387 	bfc	r3, #6, #2
 80016d2:	6053      	str	r3, [r2, #4]
			break;
 80016d4:	e013      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRH.bits.CNF9 = 0b01;
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6853      	ldr	r3, [r2, #4]
 80016da:	2101      	movs	r1, #1
 80016dc:	f361 1387 	bfi	r3, r1, #6, #2
 80016e0:	6053      	str	r3, [r2, #4]
			break;
 80016e2:	e00c      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRH.bits.CNF9 = 0b10;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6853      	ldr	r3, [r2, #4]
 80016e8:	2102      	movs	r1, #2
 80016ea:	f361 1387 	bfi	r3, r1, #6, #2
 80016ee:	6053      	str	r3, [r2, #4]
			break;
 80016f0:	e005      	b.n	80016fe <MCAL_GPIO_init+0xb72>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRH.bits.CNF9 = 0b11;
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6853      	ldr	r3, [r2, #4]
 80016f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016fa:	6053      	str	r3, [r2, #4]
			break;
 80016fc:	bf00      	nop
		}
		break;
 80016fe:	f000 bc41 	b.w	8001f84 <MCAL_GPIO_init+0x13f8>
	case GPIO_PIN10:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	789b      	ldrb	r3, [r3, #2]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d106      	bne.n	8001718 <MCAL_GPIO_init+0xb8c>
			GPIOx->CRH.bits.MODE10 = 0b01;
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6853      	ldr	r3, [r2, #4]
 800170e:	2101      	movs	r1, #1
 8001710:	f361 2309 	bfi	r3, r1, #8, #2
 8001714:	6053      	str	r3, [r2, #4]
 8001716:	e013      	b.n	8001740 <MCAL_GPIO_init+0xbb4>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d106      	bne.n	800172e <MCAL_GPIO_init+0xba2>
			GPIOx->CRH.bits.MODE10 = 0b010;
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6853      	ldr	r3, [r2, #4]
 8001724:	2102      	movs	r1, #2
 8001726:	f361 2309 	bfi	r3, r1, #8, #2
 800172a:	6053      	str	r3, [r2, #4]
 800172c:	e008      	b.n	8001740 <MCAL_GPIO_init+0xbb4>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	789b      	ldrb	r3, [r3, #2]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d104      	bne.n	8001740 <MCAL_GPIO_init+0xbb4>
			GPIOx->CRH.bits.MODE10 = 0b11;
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6853      	ldr	r3, [r2, #4]
 800173a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800173e:	6053      	str	r3, [r2, #4]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <MCAL_GPIO_init+0xbd4>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d007      	beq.n	8001760 <MCAL_GPIO_init+0xbd4>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d003      	beq.n	8001760 <MCAL_GPIO_init+0xbd4>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	785b      	ldrb	r3, [r3, #1]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d104      	bne.n	800176a <MCAL_GPIO_init+0xbde>
			GPIOx->CRH.bits.MODE10 = 0b00;
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6853      	ldr	r3, [r2, #4]
 8001764:	f36f 2309 	bfc	r3, #8, #2
 8001768:	6053      	str	r3, [r2, #4]

		switch(cfg->GPIO_PinMode){
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	2b07      	cmp	r3, #7
 8001770:	f200 840a 	bhi.w	8001f88 <MCAL_GPIO_init+0x13fc>
 8001774:	a201      	add	r2, pc, #4	; (adr r2, 800177c <MCAL_GPIO_init+0xbf0>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	0800179d 	.word	0x0800179d
 8001780:	080017a9 	.word	0x080017a9
 8001784:	080017b7 	.word	0x080017b7
 8001788:	080017cf 	.word	0x080017cf
 800178c:	080017e7 	.word	0x080017e7
 8001790:	080017f3 	.word	0x080017f3
 8001794:	08001801 	.word	0x08001801
 8001798:	0800180f 	.word	0x0800180f
		case GPIO_MODE_ANALOG:
			GPIOx->CRH.bits.CNF10 = 0b00;
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6853      	ldr	r3, [r2, #4]
 80017a0:	f36f 238b 	bfc	r3, #10, #2
 80017a4:	6053      	str	r3, [r2, #4]
			break;
 80017a6:	e038      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRH.bits.CNF10 = 0b01;
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6853      	ldr	r3, [r2, #4]
 80017ac:	2101      	movs	r1, #1
 80017ae:	f361 238b 	bfi	r3, r1, #10, #2
 80017b2:	6053      	str	r3, [r2, #4]
			break;
 80017b4:	e031      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRH.bits.CNF10 = 0b10;
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6853      	ldr	r3, [r2, #4]
 80017ba:	2102      	movs	r1, #2
 80017bc:	f361 238b 	bfi	r3, r1, #10, #2
 80017c0:	6053      	str	r3, [r2, #4]
			GPIOx->BSRR.bits.BS10 = 0b1;
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6913      	ldr	r3, [r2, #16]
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ca:	6113      	str	r3, [r2, #16]
			break;
 80017cc:	e025      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRH.bits.CNF10 = 0b10;
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6853      	ldr	r3, [r2, #4]
 80017d2:	2102      	movs	r1, #2
 80017d4:	f361 238b 	bfi	r3, r1, #10, #2
 80017d8:	6053      	str	r3, [r2, #4]
			GPIOx->BRR.bits.BR10 = 0b1;
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6953      	ldr	r3, [r2, #20]
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6153      	str	r3, [r2, #20]
			break;
 80017e4:	e019      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRH.bits.CNF10 = 0b00;
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6853      	ldr	r3, [r2, #4]
 80017ea:	f36f 238b 	bfc	r3, #10, #2
 80017ee:	6053      	str	r3, [r2, #4]
			break;
 80017f0:	e013      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRH.bits.CNF10 = 0b01;
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6853      	ldr	r3, [r2, #4]
 80017f6:	2101      	movs	r1, #1
 80017f8:	f361 238b 	bfi	r3, r1, #10, #2
 80017fc:	6053      	str	r3, [r2, #4]
			break;
 80017fe:	e00c      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRH.bits.CNF10 = 0b10;
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6853      	ldr	r3, [r2, #4]
 8001804:	2102      	movs	r1, #2
 8001806:	f361 238b 	bfi	r3, r1, #10, #2
 800180a:	6053      	str	r3, [r2, #4]
			break;
 800180c:	e005      	b.n	800181a <MCAL_GPIO_init+0xc8e>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRH.bits.CNF10 = 0b11;
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6853      	ldr	r3, [r2, #4]
 8001812:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001816:	6053      	str	r3, [r2, #4]
			break;
 8001818:	bf00      	nop
		}
		break;
 800181a:	e3b5      	b.n	8001f88 <MCAL_GPIO_init+0x13fc>

		case GPIO_PIN11:
			if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	789b      	ldrb	r3, [r3, #2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <MCAL_GPIO_init+0xca6>
				GPIOx->CRH.bits.MODE11 = 0b01;
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6853      	ldr	r3, [r2, #4]
 8001828:	2101      	movs	r1, #1
 800182a:	f361 330d 	bfi	r3, r1, #12, #2
 800182e:	6053      	str	r3, [r2, #4]
 8001830:	e013      	b.n	800185a <MCAL_GPIO_init+0xcce>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	789b      	ldrb	r3, [r3, #2]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d106      	bne.n	8001848 <MCAL_GPIO_init+0xcbc>
				GPIOx->CRH.bits.MODE11 = 0b010;
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6853      	ldr	r3, [r2, #4]
 800183e:	2102      	movs	r1, #2
 8001840:	f361 330d 	bfi	r3, r1, #12, #2
 8001844:	6053      	str	r3, [r2, #4]
 8001846:	e008      	b.n	800185a <MCAL_GPIO_init+0xcce>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d104      	bne.n	800185a <MCAL_GPIO_init+0xcce>
				GPIOx->CRH.bits.MODE11 = 0b11;
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6853      	ldr	r3, [r2, #4]
 8001854:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001858:	6053      	str	r3, [r2, #4]
			if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <MCAL_GPIO_init+0xcee>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d007      	beq.n	800187a <MCAL_GPIO_init+0xcee>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <MCAL_GPIO_init+0xcee>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d104      	bne.n	8001884 <MCAL_GPIO_init+0xcf8>
				GPIOx->CRH.bits.MODE11 = 0b00;
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6853      	ldr	r3, [r2, #4]
 800187e:	f36f 330d 	bfc	r3, #12, #2
 8001882:	6053      	str	r3, [r2, #4]

			switch(cfg->GPIO_PinMode){
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b07      	cmp	r3, #7
 800188a:	f200 837f 	bhi.w	8001f8c <MCAL_GPIO_init+0x1400>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <MCAL_GPIO_init+0xd08>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	080018b5 	.word	0x080018b5
 8001898:	080018c1 	.word	0x080018c1
 800189c:	080018cf 	.word	0x080018cf
 80018a0:	080018e7 	.word	0x080018e7
 80018a4:	080018ff 	.word	0x080018ff
 80018a8:	0800190b 	.word	0x0800190b
 80018ac:	08001919 	.word	0x08001919
 80018b0:	08001927 	.word	0x08001927
			case GPIO_MODE_ANALOG:
				GPIOx->CRH.bits.CNF11 = 0b00;
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6853      	ldr	r3, [r2, #4]
 80018b8:	f36f 338f 	bfc	r3, #14, #2
 80018bc:	6053      	str	r3, [r2, #4]
				break;
 80018be:	e038      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_INPUT_FLO:
				GPIOx->CRH.bits.CNF11 = 0b01;
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	2101      	movs	r1, #1
 80018c6:	f361 338f 	bfi	r3, r1, #14, #2
 80018ca:	6053      	str	r3, [r2, #4]
				break;
 80018cc:	e031      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_INPUT_PU:
				GPIOx->CRH.bits.CNF11 = 0b10;
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6853      	ldr	r3, [r2, #4]
 80018d2:	2102      	movs	r1, #2
 80018d4:	f361 338f 	bfi	r3, r1, #14, #2
 80018d8:	6053      	str	r3, [r2, #4]
				GPIOx->BSRR.bits.BS11 = 0b1;
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6913      	ldr	r3, [r2, #16]
 80018de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e2:	6113      	str	r3, [r2, #16]
				break;
 80018e4:	e025      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_INPUT_PD:
				GPIOx->CRH.bits.CNF11 = 0b10;
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6853      	ldr	r3, [r2, #4]
 80018ea:	2102      	movs	r1, #2
 80018ec:	f361 338f 	bfi	r3, r1, #14, #2
 80018f0:	6053      	str	r3, [r2, #4]
				GPIOx->BRR.bits.BR11  = 0b1;
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6953      	ldr	r3, [r2, #20]
 80018f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018fa:	6153      	str	r3, [r2, #20]
				break;
 80018fc:	e019      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_OUTPUT_PP:
				GPIOx->CRH.bits.CNF11 = 0b00;
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6853      	ldr	r3, [r2, #4]
 8001902:	f36f 338f 	bfc	r3, #14, #2
 8001906:	6053      	str	r3, [r2, #4]
				break;
 8001908:	e013      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_OUTPUT_OD:
				GPIOx->CRH.bits.CNF11 = 0b01;
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6853      	ldr	r3, [r2, #4]
 800190e:	2101      	movs	r1, #1
 8001910:	f361 338f 	bfi	r3, r1, #14, #2
 8001914:	6053      	str	r3, [r2, #4]
				break;
 8001916:	e00c      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_OUTPUT_AF_PP:
				GPIOx->CRH.bits.CNF11 = 0b10;
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6853      	ldr	r3, [r2, #4]
 800191c:	2102      	movs	r1, #2
 800191e:	f361 338f 	bfi	r3, r1, #14, #2
 8001922:	6053      	str	r3, [r2, #4]
				break;
 8001924:	e005      	b.n	8001932 <MCAL_GPIO_init+0xda6>
			case GPIO_MODE_OUTPUT_AF_OD:
				GPIOx->CRH.bits.CNF11 = 0b11;
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6853      	ldr	r3, [r2, #4]
 800192a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800192e:	6053      	str	r3, [r2, #4]
				break;
 8001930:	bf00      	nop
			}
			break;
 8001932:	e32b      	b.n	8001f8c <MCAL_GPIO_init+0x1400>
	case GPIO_PIN12:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	789b      	ldrb	r3, [r3, #2]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <MCAL_GPIO_init+0xdbe>
			GPIOx->CRH.bits.MODE12 = 0b01;
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6853      	ldr	r3, [r2, #4]
 8001940:	2101      	movs	r1, #1
 8001942:	f361 4311 	bfi	r3, r1, #16, #2
 8001946:	6053      	str	r3, [r2, #4]
 8001948:	e013      	b.n	8001972 <MCAL_GPIO_init+0xde6>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d106      	bne.n	8001960 <MCAL_GPIO_init+0xdd4>
			GPIOx->CRH.bits.MODE12 = 0b010;
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6853      	ldr	r3, [r2, #4]
 8001956:	2102      	movs	r1, #2
 8001958:	f361 4311 	bfi	r3, r1, #16, #2
 800195c:	6053      	str	r3, [r2, #4]
 800195e:	e008      	b.n	8001972 <MCAL_GPIO_init+0xde6>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	789b      	ldrb	r3, [r3, #2]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d104      	bne.n	8001972 <MCAL_GPIO_init+0xde6>
			GPIOx->CRH.bits.MODE12 = 0b11;
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6853      	ldr	r3, [r2, #4]
 800196c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001970:	6053      	str	r3, [r2, #4]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	785b      	ldrb	r3, [r3, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <MCAL_GPIO_init+0xe06>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d007      	beq.n	8001992 <MCAL_GPIO_init+0xe06>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d003      	beq.n	8001992 <MCAL_GPIO_init+0xe06>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d104      	bne.n	800199c <MCAL_GPIO_init+0xe10>
			GPIOx->CRH.bits.MODE12 = 0b00;
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6853      	ldr	r3, [r2, #4]
 8001996:	f36f 4311 	bfc	r3, #16, #2
 800199a:	6053      	str	r3, [r2, #4]

		switch(cfg->GPIO_PinMode){
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b07      	cmp	r3, #7
 80019a2:	f200 82f5 	bhi.w	8001f90 <MCAL_GPIO_init+0x1404>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <MCAL_GPIO_init+0xe20>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019cd 	.word	0x080019cd
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	080019e7 	.word	0x080019e7
 80019b8:	080019ff 	.word	0x080019ff
 80019bc:	08001a17 	.word	0x08001a17
 80019c0:	08001a23 	.word	0x08001a23
 80019c4:	08001a31 	.word	0x08001a31
 80019c8:	08001a3f 	.word	0x08001a3f
		case GPIO_MODE_ANALOG:
			GPIOx->CRH.bits.CNF12 = 0b00;
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6853      	ldr	r3, [r2, #4]
 80019d0:	f36f 4393 	bfc	r3, #18, #2
 80019d4:	6053      	str	r3, [r2, #4]
			break;
 80019d6:	e038      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRH.bits.CNF12 = 0b01;
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6853      	ldr	r3, [r2, #4]
 80019dc:	2101      	movs	r1, #1
 80019de:	f361 4393 	bfi	r3, r1, #18, #2
 80019e2:	6053      	str	r3, [r2, #4]
			break;
 80019e4:	e031      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRH.bits.CNF12 = 0b10;
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6853      	ldr	r3, [r2, #4]
 80019ea:	2102      	movs	r1, #2
 80019ec:	f361 4393 	bfi	r3, r1, #18, #2
 80019f0:	6053      	str	r3, [r2, #4]
			GPIOx->BSRR.bits.BS12 = 0b1;
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6913      	ldr	r3, [r2, #16]
 80019f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019fa:	6113      	str	r3, [r2, #16]
			break;
 80019fc:	e025      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRH.bits.CNF12 = 0b10;
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6853      	ldr	r3, [r2, #4]
 8001a02:	2102      	movs	r1, #2
 8001a04:	f361 4393 	bfi	r3, r1, #18, #2
 8001a08:	6053      	str	r3, [r2, #4]
			GPIOx->BRR.bits.BR12  = 0b1;
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6953      	ldr	r3, [r2, #20]
 8001a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a12:	6153      	str	r3, [r2, #20]
			break;
 8001a14:	e019      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRH.bits.CNF12 = 0b00;
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6853      	ldr	r3, [r2, #4]
 8001a1a:	f36f 4393 	bfc	r3, #18, #2
 8001a1e:	6053      	str	r3, [r2, #4]
			break;
 8001a20:	e013      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRH.bits.CNF12 = 0b01;
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6853      	ldr	r3, [r2, #4]
 8001a26:	2101      	movs	r1, #1
 8001a28:	f361 4393 	bfi	r3, r1, #18, #2
 8001a2c:	6053      	str	r3, [r2, #4]
			break;
 8001a2e:	e00c      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRH.bits.CNF12 = 0b10;
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6853      	ldr	r3, [r2, #4]
 8001a34:	2102      	movs	r1, #2
 8001a36:	f361 4393 	bfi	r3, r1, #18, #2
 8001a3a:	6053      	str	r3, [r2, #4]
			break;
 8001a3c:	e005      	b.n	8001a4a <MCAL_GPIO_init+0xebe>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRH.bits.CNF12 = 0b11;
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6853      	ldr	r3, [r2, #4]
 8001a42:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001a46:	6053      	str	r3, [r2, #4]
			break;
 8001a48:	bf00      	nop
		}
		break;
 8001a4a:	e2a1      	b.n	8001f90 <MCAL_GPIO_init+0x1404>
		case GPIO_PIN13:
			if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	789b      	ldrb	r3, [r3, #2]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <MCAL_GPIO_init+0xed6>
				GPIOx->CRH.bits.MODE13 = 0b01;
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6853      	ldr	r3, [r2, #4]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	f361 5315 	bfi	r3, r1, #20, #2
 8001a5e:	6053      	str	r3, [r2, #4]
 8001a60:	e013      	b.n	8001a8a <MCAL_GPIO_init+0xefe>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	789b      	ldrb	r3, [r3, #2]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d106      	bne.n	8001a78 <MCAL_GPIO_init+0xeec>
				GPIOx->CRH.bits.MODE13 = 0b010;
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6853      	ldr	r3, [r2, #4]
 8001a6e:	2102      	movs	r1, #2
 8001a70:	f361 5315 	bfi	r3, r1, #20, #2
 8001a74:	6053      	str	r3, [r2, #4]
 8001a76:	e008      	b.n	8001a8a <MCAL_GPIO_init+0xefe>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	789b      	ldrb	r3, [r3, #2]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d104      	bne.n	8001a8a <MCAL_GPIO_init+0xefe>
				GPIOx->CRH.bits.MODE13 = 0b11;
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6853      	ldr	r3, [r2, #4]
 8001a84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001a88:	6053      	str	r3, [r2, #4]
			if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <MCAL_GPIO_init+0xf1e>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d007      	beq.n	8001aaa <MCAL_GPIO_init+0xf1e>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d003      	beq.n	8001aaa <MCAL_GPIO_init+0xf1e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	785b      	ldrb	r3, [r3, #1]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d104      	bne.n	8001ab4 <MCAL_GPIO_init+0xf28>
				GPIOx->CRH.bits.MODE13 = 0b00;
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6853      	ldr	r3, [r2, #4]
 8001aae:	f36f 5315 	bfc	r3, #20, #2
 8001ab2:	6053      	str	r3, [r2, #4]

			switch(cfg->GPIO_PinMode){
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	2b07      	cmp	r3, #7
 8001aba:	f200 826b 	bhi.w	8001f94 <MCAL_GPIO_init+0x1408>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <MCAL_GPIO_init+0xf38>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001ae5 	.word	0x08001ae5
 8001ac8:	08001af1 	.word	0x08001af1
 8001acc:	08001aff 	.word	0x08001aff
 8001ad0:	08001b17 	.word	0x08001b17
 8001ad4:	08001b2f 	.word	0x08001b2f
 8001ad8:	08001b3b 	.word	0x08001b3b
 8001adc:	08001b49 	.word	0x08001b49
 8001ae0:	08001b57 	.word	0x08001b57
			case GPIO_MODE_ANALOG:
				GPIOx->CRH.bits.CNF13 = 0b00;
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6853      	ldr	r3, [r2, #4]
 8001ae8:	f36f 5397 	bfc	r3, #22, #2
 8001aec:	6053      	str	r3, [r2, #4]
				break;
 8001aee:	e038      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_INPUT_FLO:
				GPIOx->CRH.bits.CNF13 = 0b01;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6853      	ldr	r3, [r2, #4]
 8001af4:	2101      	movs	r1, #1
 8001af6:	f361 5397 	bfi	r3, r1, #22, #2
 8001afa:	6053      	str	r3, [r2, #4]
				break;
 8001afc:	e031      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_INPUT_PU:
				GPIOx->CRH.bits.CNF13 = 0b10;
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6853      	ldr	r3, [r2, #4]
 8001b02:	2102      	movs	r1, #2
 8001b04:	f361 5397 	bfi	r3, r1, #22, #2
 8001b08:	6053      	str	r3, [r2, #4]
				GPIOx->BSRR.bits.BS13 = 0b1;
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6913      	ldr	r3, [r2, #16]
 8001b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b12:	6113      	str	r3, [r2, #16]
				break;
 8001b14:	e025      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_INPUT_PD:
				GPIOx->CRH.bits.CNF13 = 0b10;
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6853      	ldr	r3, [r2, #4]
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	f361 5397 	bfi	r3, r1, #22, #2
 8001b20:	6053      	str	r3, [r2, #4]
				GPIOx->BRR.bits.BR13 = 0b1;
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6953      	ldr	r3, [r2, #20]
 8001b26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b2a:	6153      	str	r3, [r2, #20]
				break;
 8001b2c:	e019      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_OUTPUT_PP:
				GPIOx->CRH.bits.CNF13 = 0b00;
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6853      	ldr	r3, [r2, #4]
 8001b32:	f36f 5397 	bfc	r3, #22, #2
 8001b36:	6053      	str	r3, [r2, #4]
				break;
 8001b38:	e013      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_OUTPUT_OD:
				GPIOx->CRH.bits.CNF13 = 0b01;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6853      	ldr	r3, [r2, #4]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	f361 5397 	bfi	r3, r1, #22, #2
 8001b44:	6053      	str	r3, [r2, #4]
				break;
 8001b46:	e00c      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_OUTPUT_AF_PP:
				GPIOx->CRH.bits.CNF13 = 0b10;
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6853      	ldr	r3, [r2, #4]
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	f361 5397 	bfi	r3, r1, #22, #2
 8001b52:	6053      	str	r3, [r2, #4]
				break;
 8001b54:	e005      	b.n	8001b62 <MCAL_GPIO_init+0xfd6>
			case GPIO_MODE_OUTPUT_AF_OD:
				GPIOx->CRH.bits.CNF13 = 0b11;
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6853      	ldr	r3, [r2, #4]
 8001b5a:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8001b5e:	6053      	str	r3, [r2, #4]
				break;
 8001b60:	bf00      	nop
			}
			break;
 8001b62:	e217      	b.n	8001f94 <MCAL_GPIO_init+0x1408>

	case GPIO_PIN14:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	789b      	ldrb	r3, [r3, #2]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <MCAL_GPIO_init+0xfee>
			GPIOx->CRH.bits.MODE14 = 0b01;
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6853      	ldr	r3, [r2, #4]
 8001b70:	2101      	movs	r1, #1
 8001b72:	f361 6319 	bfi	r3, r1, #24, #2
 8001b76:	6053      	str	r3, [r2, #4]
 8001b78:	e013      	b.n	8001ba2 <MCAL_GPIO_init+0x1016>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	789b      	ldrb	r3, [r3, #2]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d106      	bne.n	8001b90 <MCAL_GPIO_init+0x1004>
			GPIOx->CRH.bits.MODE14 = 0b010;
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6853      	ldr	r3, [r2, #4]
 8001b86:	2102      	movs	r1, #2
 8001b88:	f361 6319 	bfi	r3, r1, #24, #2
 8001b8c:	6053      	str	r3, [r2, #4]
 8001b8e:	e008      	b.n	8001ba2 <MCAL_GPIO_init+0x1016>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d104      	bne.n	8001ba2 <MCAL_GPIO_init+0x1016>
			GPIOx->CRH.bits.MODE14 = 0b11;
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6853      	ldr	r3, [r2, #4]
 8001b9c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001ba0:	6053      	str	r3, [r2, #4]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	785b      	ldrb	r3, [r3, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <MCAL_GPIO_init+0x1036>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d007      	beq.n	8001bc2 <MCAL_GPIO_init+0x1036>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	785b      	ldrb	r3, [r3, #1]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <MCAL_GPIO_init+0x1036>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d104      	bne.n	8001bcc <MCAL_GPIO_init+0x1040>
			GPIOx->CRH.bits.MODE14 = 0b00;
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6853      	ldr	r3, [r2, #4]
 8001bc6:	f36f 6319 	bfc	r3, #24, #2
 8001bca:	6053      	str	r3, [r2, #4]

		switch(cfg->GPIO_PinMode){
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	f200 81e1 	bhi.w	8001f98 <MCAL_GPIO_init+0x140c>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <MCAL_GPIO_init+0x1050>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001bfd 	.word	0x08001bfd
 8001be0:	08001c09 	.word	0x08001c09
 8001be4:	08001c17 	.word	0x08001c17
 8001be8:	08001c2f 	.word	0x08001c2f
 8001bec:	08001c47 	.word	0x08001c47
 8001bf0:	08001c53 	.word	0x08001c53
 8001bf4:	08001c61 	.word	0x08001c61
 8001bf8:	08001c6f 	.word	0x08001c6f
		case GPIO_MODE_ANALOG:
			GPIOx->CRH.bits.CNF14 = 0b00;
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6853      	ldr	r3, [r2, #4]
 8001c00:	f36f 639b 	bfc	r3, #26, #2
 8001c04:	6053      	str	r3, [r2, #4]
			break;
 8001c06:	e038      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRH.bits.CNF14 = 0b01;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6853      	ldr	r3, [r2, #4]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	f361 639b 	bfi	r3, r1, #26, #2
 8001c12:	6053      	str	r3, [r2, #4]
			break;
 8001c14:	e031      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRH.bits.CNF14 = 0b10;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6853      	ldr	r3, [r2, #4]
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	f361 639b 	bfi	r3, r1, #26, #2
 8001c20:	6053      	str	r3, [r2, #4]
			GPIOx->BSRR.bits.BS14 = 0b1;
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6913      	ldr	r3, [r2, #16]
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6113      	str	r3, [r2, #16]
			break;
 8001c2c:	e025      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRH.bits.CNF14 = 0b10;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6853      	ldr	r3, [r2, #4]
 8001c32:	2102      	movs	r1, #2
 8001c34:	f361 639b 	bfi	r3, r1, #26, #2
 8001c38:	6053      	str	r3, [r2, #4]
			GPIOx->BRR.bits.BR14 = 0b1;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6953      	ldr	r3, [r2, #20]
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	6153      	str	r3, [r2, #20]
			break;
 8001c44:	e019      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRH.bits.CNF14 = 0b00;
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6853      	ldr	r3, [r2, #4]
 8001c4a:	f36f 639b 	bfc	r3, #26, #2
 8001c4e:	6053      	str	r3, [r2, #4]
			break;
 8001c50:	e013      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRH.bits.CNF14 = 0b01;
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6853      	ldr	r3, [r2, #4]
 8001c56:	2101      	movs	r1, #1
 8001c58:	f361 639b 	bfi	r3, r1, #26, #2
 8001c5c:	6053      	str	r3, [r2, #4]
			break;
 8001c5e:	e00c      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRH.bits.CNF14 = 0b10;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6853      	ldr	r3, [r2, #4]
 8001c64:	2102      	movs	r1, #2
 8001c66:	f361 639b 	bfi	r3, r1, #26, #2
 8001c6a:	6053      	str	r3, [r2, #4]
			break;
 8001c6c:	e005      	b.n	8001c7a <MCAL_GPIO_init+0x10ee>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRH.bits.CNF14 = 0b11;
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6853      	ldr	r3, [r2, #4]
 8001c72:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8001c76:	6053      	str	r3, [r2, #4]
			break;
 8001c78:	bf00      	nop
		}
		break;
 8001c7a:	e18d      	b.n	8001f98 <MCAL_GPIO_init+0x140c>

	case GPIO_PIN15:
		if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <MCAL_GPIO_init+0x1106>
			GPIOx->CRH.bits.MODE15 = 0b01;
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6853      	ldr	r3, [r2, #4]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	f361 731d 	bfi	r3, r1, #28, #2
 8001c8e:	6053      	str	r3, [r2, #4]
 8001c90:	e013      	b.n	8001cba <MCAL_GPIO_init+0x112e>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	789b      	ldrb	r3, [r3, #2]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d106      	bne.n	8001ca8 <MCAL_GPIO_init+0x111c>
			GPIOx->CRH.bits.MODE15 = 0b010;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6853      	ldr	r3, [r2, #4]
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	f361 731d 	bfi	r3, r1, #28, #2
 8001ca4:	6053      	str	r3, [r2, #4]
 8001ca6:	e008      	b.n	8001cba <MCAL_GPIO_init+0x112e>
		else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	789b      	ldrb	r3, [r3, #2]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d104      	bne.n	8001cba <MCAL_GPIO_init+0x112e>
			GPIOx->CRH.bits.MODE15 = 0b11;
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6853      	ldr	r3, [r2, #4]
 8001cb4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001cb8:	6053      	str	r3, [r2, #4]
		if(cfg->GPIO_PinMode ==GPIO_MODE_ANALOG||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_FLO||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PU||cfg->GPIO_PinMode ==GPIO_MODE_INPUT_PD)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	785b      	ldrb	r3, [r3, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <MCAL_GPIO_init+0x114e>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d007      	beq.n	8001cda <MCAL_GPIO_init+0x114e>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <MCAL_GPIO_init+0x114e>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d104      	bne.n	8001ce4 <MCAL_GPIO_init+0x1158>
			GPIOx->CRH.bits.MODE15 = 0b00;
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6853      	ldr	r3, [r2, #4]
 8001cde:	f36f 731d 	bfc	r3, #28, #2
 8001ce2:	6053      	str	r3, [r2, #4]

		switch(cfg->GPIO_PinMode){
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	f200 8157 	bhi.w	8001f9c <MCAL_GPIO_init+0x1410>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <MCAL_GPIO_init+0x1168>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d15 	.word	0x08001d15
 8001cf8:	08001d21 	.word	0x08001d21
 8001cfc:	08001d2f 	.word	0x08001d2f
 8001d00:	08001d47 	.word	0x08001d47
 8001d04:	08001d5f 	.word	0x08001d5f
 8001d08:	08001d6b 	.word	0x08001d6b
 8001d0c:	08001d79 	.word	0x08001d79
 8001d10:	08001d87 	.word	0x08001d87
		case GPIO_MODE_ANALOG:
			GPIOx->CRH.bits.CNF15 = 0b00;
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6853      	ldr	r3, [r2, #4]
 8001d18:	f36f 739f 	bfc	r3, #30, #2
 8001d1c:	6053      	str	r3, [r2, #4]
			break;
 8001d1e:	e038      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRH.bits.CNF15 = 0b01;
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6853      	ldr	r3, [r2, #4]
 8001d24:	2101      	movs	r1, #1
 8001d26:	f361 739f 	bfi	r3, r1, #30, #2
 8001d2a:	6053      	str	r3, [r2, #4]
			break;
 8001d2c:	e031      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRH.bits.CNF15 = 0b10;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6853      	ldr	r3, [r2, #4]
 8001d32:	2102      	movs	r1, #2
 8001d34:	f361 739f 	bfi	r3, r1, #30, #2
 8001d38:	6053      	str	r3, [r2, #4]
			GPIOx->BSRR.bits.BS15 = 0b1;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6913      	ldr	r3, [r2, #16]
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d42:	6113      	str	r3, [r2, #16]
			break;
 8001d44:	e025      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRH.bits.CNF15 = 0b10;
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6853      	ldr	r3, [r2, #4]
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	f361 739f 	bfi	r3, r1, #30, #2
 8001d50:	6053      	str	r3, [r2, #4]
			GPIOx->BRR.bits.BR15 = 0b1;
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6953      	ldr	r3, [r2, #20]
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	6153      	str	r3, [r2, #20]
			break;
 8001d5c:	e019      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_OUTPUT_PP:
			GPIOx->CRH.bits.CNF15 = 0b00;
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6853      	ldr	r3, [r2, #4]
 8001d62:	f36f 739f 	bfc	r3, #30, #2
 8001d66:	6053      	str	r3, [r2, #4]
			break;
 8001d68:	e013      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_OUTPUT_OD:
			GPIOx->CRH.bits.CNF15 = 0b01;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6853      	ldr	r3, [r2, #4]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	f361 739f 	bfi	r3, r1, #30, #2
 8001d74:	6053      	str	r3, [r2, #4]
			break;
 8001d76:	e00c      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_OUTPUT_AF_PP:
			GPIOx->CRH.bits.CNF15 = 0b10;
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6853      	ldr	r3, [r2, #4]
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	f361 739f 	bfi	r3, r1, #30, #2
 8001d82:	6053      	str	r3, [r2, #4]
			break;
 8001d84:	e005      	b.n	8001d92 <MCAL_GPIO_init+0x1206>
		case GPIO_MODE_OUTPUT_AF_OD:
			GPIOx->CRH.bits.CNF15 = 0b11;
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6853      	ldr	r3, [r2, #4]
 8001d8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001d8e:	6053      	str	r3, [r2, #4]
			break;
 8001d90:	bf00      	nop
		}
		break;
 8001d92:	e103      	b.n	8001f9c <MCAL_GPIO_init+0x1410>

	case GPIO_PORT:
		switch(cfg->GPIO_PinMode){
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	f200 8101 	bhi.w	8001fa0 <MCAL_GPIO_init+0x1414>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <MCAL_GPIO_init+0x1218>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001dc5 	.word	0x08001dc5
 8001da8:	08001dd3 	.word	0x08001dd3
 8001dac:	08001de5 	.word	0x08001de5
 8001db0:	08001dff 	.word	0x08001dff
 8001db4:	08001e19 	.word	0x08001e19
 8001db8:	08001e67 	.word	0x08001e67
 8001dbc:	08001eb5 	.word	0x08001eb5
 8001dc0:	08001f03 	.word	0x08001f03
		case GPIO_MODE_ANALOG:
			GPIOx->CRL.CRL = 0x00000000;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
			GPIOx->CRH.CRH = 0x00000000;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
			break;
 8001dd0:	e0c5      	b.n	8001f5e <MCAL_GPIO_init+0x13d2>
		case GPIO_MODE_INPUT_FLO:
			GPIOx->CRL.CRL = 0x44444444;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8001dd8:	601a      	str	r2, [r3, #0]
			GPIOx->CRH.CRH = 0x44444444;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8001de0:	605a      	str	r2, [r3, #4]
			break;
 8001de2:	e0bc      	b.n	8001f5e <MCAL_GPIO_init+0x13d2>
		case GPIO_MODE_INPUT_PU:
			GPIOx->CRL.CRL  = 0x88888888;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001dea:	601a      	str	r2, [r3, #0]
			GPIOx->CRH.CRH = 0x88888888;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001df2:	605a      	str	r2, [r3, #4]
			GPIOx->BSRR.BSRR = 0x0000FFFF;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfa:	611a      	str	r2, [r3, #16]
			break;
 8001dfc:	e0af      	b.n	8001f5e <MCAL_GPIO_init+0x13d2>
		case GPIO_MODE_INPUT_PD:
			GPIOx->CRL.CRL = 0x88888888;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001e04:	601a      	str	r2, [r3, #0]
			GPIOx->CRH.CRH = 0x88888888;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001e0c:	605a      	str	r2, [r3, #4]
			GPIOx->BRR.BRR = 0x0000FFFF;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	615a      	str	r2, [r3, #20]
			break;
 8001e16:	e0a2      	b.n	8001f5e <MCAL_GPIO_init+0x13d2>
		case GPIO_MODE_OUTPUT_PP:
			if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M){
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <MCAL_GPIO_init+0x12a6>
				GPIOx->CRL.CRL = 0x11111111;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001e26:	601a      	str	r2, [r3, #0]
				GPIOx->CRH.CRH = 0x11111111;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001e2e:	605a      	str	r2, [r3, #4]
			}
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
				GPIOx->CRH.CRH= 0x33333333;
				GPIOx->CRL.CRL = 0x33333333;
			}
			break;
 8001e30:	e08e      	b.n	8001f50 <MCAL_GPIO_init+0x13c4>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M){
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d108      	bne.n	8001e4c <MCAL_GPIO_init+0x12c0>
				GPIOx->CRH.CRH = 0x22222222;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 8001e40:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0x22222222;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 8001e48:	601a      	str	r2, [r3, #0]
			break;
 8001e4a:	e081      	b.n	8001f50 <MCAL_GPIO_init+0x13c4>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d17d      	bne.n	8001f50 <MCAL_GPIO_init+0x13c4>
				GPIOx->CRH.CRH= 0x33333333;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001e5a:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0x33333333;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001e62:	601a      	str	r2, [r3, #0]
			break;
 8001e64:	e074      	b.n	8001f50 <MCAL_GPIO_init+0x13c4>
		case GPIO_MODE_OUTPUT_OD:
			if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M){
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <MCAL_GPIO_init+0x12f4>
				GPIOx->CRL.CRL = 0x55555555;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001e74:	601a      	str	r2, [r3, #0]
				GPIOx->CRH.CRH = 0x55555555;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001e7c:	605a      	str	r2, [r3, #4]
			}
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
				GPIOx->CRH.CRH = 0x77777777;
				GPIOx->CRL.CRL = 0x77777777;
			}
			break;
 8001e7e:	e069      	b.n	8001f54 <MCAL_GPIO_init+0x13c8>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M){
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	789b      	ldrb	r3, [r3, #2]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d108      	bne.n	8001e9a <MCAL_GPIO_init+0x130e>
				GPIOx->CRH.CRH = 0x66666666;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f04f 3266 	mov.w	r2, #1717986918	; 0x66666666
 8001e8e:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0x66666666;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f04f 3266 	mov.w	r2, #1717986918	; 0x66666666
 8001e96:	601a      	str	r2, [r3, #0]
			break;
 8001e98:	e05c      	b.n	8001f54 <MCAL_GPIO_init+0x13c8>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	789b      	ldrb	r3, [r3, #2]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d158      	bne.n	8001f54 <MCAL_GPIO_init+0x13c8>
				GPIOx->CRH.CRH = 0x77777777;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
 8001ea8:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0x77777777;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
 8001eb0:	601a      	str	r2, [r3, #0]
			break;
 8001eb2:	e04f      	b.n	8001f54 <MCAL_GPIO_init+0x13c8>
		case GPIO_MODE_OUTPUT_AF_PP:
			if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M){
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <MCAL_GPIO_init+0x1342>
				GPIOx->CRL.CRL = 0x99999999;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
 8001ec2:	601a      	str	r2, [r3, #0]
				GPIOx->CRH.CRH = 0x99999999;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
 8001eca:	605a      	str	r2, [r3, #4]
			}
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
				GPIOx->CRH.CRH = 0xBBBBBBBB;
				GPIOx->CRL.CRL = 0xBBBBBBBB;
			}
			break;
 8001ecc:	e044      	b.n	8001f58 <MCAL_GPIO_init+0x13cc>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M){
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	789b      	ldrb	r3, [r3, #2]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d108      	bne.n	8001ee8 <MCAL_GPIO_init+0x135c>
				GPIOx->CRH.CRH = 0xAAAAAAAA;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8001edc:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0xAAAAAAAA;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8001ee4:	601a      	str	r2, [r3, #0]
			break;
 8001ee6:	e037      	b.n	8001f58 <MCAL_GPIO_init+0x13cc>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	789b      	ldrb	r3, [r3, #2]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d133      	bne.n	8001f58 <MCAL_GPIO_init+0x13cc>
				GPIOx->CRH.CRH = 0xBBBBBBBB;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8001ef6:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0xBBBBBBBB;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8001efe:	601a      	str	r2, [r3, #0]
			break;
 8001f00:	e02a      	b.n	8001f58 <MCAL_GPIO_init+0x13cc>
		case GPIO_MODE_OUTPUT_AF_OD:
			if(cfg->GPIO_OutputSpeed == GPIO_SPEED_10M){
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	789b      	ldrb	r3, [r3, #2]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d108      	bne.n	8001f1c <MCAL_GPIO_init+0x1390>
				GPIOx->CRL.CRL = 0xDDDDDDDD;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 8001f10:	601a      	str	r2, [r3, #0]
				GPIOx->CRH.CRH = 0xDDDDDDDD;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 8001f18:	605a      	str	r2, [r3, #4]
			}
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
				GPIOx->CRH.CRH = 0xFFFFFFFF;
				GPIOx->CRL.CRL = 0xFFFFFFFF;
			}
			break;
 8001f1a:	e01f      	b.n	8001f5c <MCAL_GPIO_init+0x13d0>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_2M){
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	789b      	ldrb	r3, [r3, #2]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d108      	bne.n	8001f36 <MCAL_GPIO_init+0x13aa>
				GPIOx->CRH.CRH = 0xEEEEEEEE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8001f2a:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0xEEEEEEEE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8001f32:	601a      	str	r2, [r3, #0]
			break;
 8001f34:	e012      	b.n	8001f5c <MCAL_GPIO_init+0x13d0>
			else if(cfg->GPIO_OutputSpeed == GPIO_SPEED_50M){
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d10e      	bne.n	8001f5c <MCAL_GPIO_init+0x13d0>
				GPIOx->CRH.CRH = 0xFFFFFFFF;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	605a      	str	r2, [r3, #4]
				GPIOx->CRL.CRL = 0xFFFFFFFF;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	601a      	str	r2, [r3, #0]
			break;
 8001f4e:	e005      	b.n	8001f5c <MCAL_GPIO_init+0x13d0>
			break;
 8001f50:	bf00      	nop
 8001f52:	e025      	b.n	8001fa0 <MCAL_GPIO_init+0x1414>
			break;
 8001f54:	bf00      	nop
 8001f56:	e023      	b.n	8001fa0 <MCAL_GPIO_init+0x1414>
			break;
 8001f58:	bf00      	nop
 8001f5a:	e021      	b.n	8001fa0 <MCAL_GPIO_init+0x1414>
			break;
 8001f5c:	bf00      	nop
		}
		break;
 8001f5e:	e01f      	b.n	8001fa0 <MCAL_GPIO_init+0x1414>
		break;
 8001f60:	bf00      	nop
 8001f62:	e01e      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f64:	bf00      	nop
 8001f66:	e01c      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f68:	bf00      	nop
 8001f6a:	e01a      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f6c:	bf00      	nop
 8001f6e:	e018      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f70:	bf00      	nop
 8001f72:	e016      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f74:	bf00      	nop
 8001f76:	e014      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f78:	bf00      	nop
 8001f7a:	e012      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f7c:	bf00      	nop
 8001f7e:	e010      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f80:	bf00      	nop
 8001f82:	e00e      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f84:	bf00      	nop
 8001f86:	e00c      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f88:	bf00      	nop
 8001f8a:	e00a      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
			break;
 8001f8c:	bf00      	nop
 8001f8e:	e008      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f90:	bf00      	nop
 8001f92:	e006      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
			break;
 8001f94:	bf00      	nop
 8001f96:	e004      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f98:	bf00      	nop
 8001f9a:	e002      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001f9c:	bf00      	nop
 8001f9e:	e000      	b.n	8001fa2 <MCAL_GPIO_init+0x1416>
		break;
 8001fa0:	bf00      	nop
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <MCAL_GPIO_readPin>:
 * @param [in] 	-GPIOx: x can be (A...E) to select the GPIO peripheral.
 * @param [in] 	-PinNumber: Specifies the PIN to be read.
 * @retval 		-either one of two states check: @ref GPIO_PIN_STATE_define
 * Note			-none
 */
uint8 MCAL_GPIO_readPin(GPIO_typedef * GPIOx,uint8 PinNumber ){
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]

	uint8 state;
	switch(PinNumber){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f200 80a4 	bhi.w	8002108 <MCAL_GPIO_readPin+0x15c>
 8001fc0:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <MCAL_GPIO_readPin+0x1c>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08002009 	.word	0x08002009
 8001fcc:	08002019 	.word	0x08002019
 8001fd0:	08002029 	.word	0x08002029
 8001fd4:	08002039 	.word	0x08002039
 8001fd8:	08002049 	.word	0x08002049
 8001fdc:	08002059 	.word	0x08002059
 8001fe0:	08002069 	.word	0x08002069
 8001fe4:	08002079 	.word	0x08002079
 8001fe8:	08002089 	.word	0x08002089
 8001fec:	08002099 	.word	0x08002099
 8001ff0:	080020a9 	.word	0x080020a9
 8001ff4:	080020b9 	.word	0x080020b9
 8001ff8:	080020c9 	.word	0x080020c9
 8001ffc:	080020d9 	.word	0x080020d9
 8002000:	080020e9 	.word	0x080020e9
 8002004:	080020f9 	.word	0x080020f9
	case GPIO_PIN0:
		state =(uint8)GPIOx->IDR.bits.IDR0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	e078      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN1:
		state =(uint8)GPIOx->IDR.bits.IDR1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	e070      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN2:
		state =(uint8)GPIOx->IDR.bits.IDR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	e068      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN3:
		state =(uint8)GPIOx->IDR.bits.IDR3;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	e060      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN4:
		state =(uint8)GPIOx->IDR.bits.IDR4;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	e058      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN5:
		state =(uint8)GPIOx->IDR.bits.IDR5;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	e050      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN6:
		state =(uint8)GPIOx->IDR.bits.IDR6;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	e048      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN7:
		state =(uint8)GPIOx->IDR.bits.IDR7;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	e040      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN8:
		state =(uint8)GPIOx->IDR.bits.IDR8;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	e038      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN9:
		state =(uint8)GPIOx->IDR.bits.IDR9;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	73fb      	strb	r3, [r7, #15]
		return state ;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	e030      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN10:
		state =(uint8)GPIOx->IDR.bits.IDR10;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	73fb      	strb	r3, [r7, #15]
		return state ;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	e028      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN11:
		state =(uint8)GPIOx->IDR.bits.IDR11;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73fb      	strb	r3, [r7, #15]
		return state ;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	e020      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN12:
		state =(uint8)GPIOx->IDR.bits.IDR12;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	73fb      	strb	r3, [r7, #15]
		return state ;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	e018      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN13:
		state =(uint8)GPIOx->IDR.bits.IDR13;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	73fb      	strb	r3, [r7, #15]
		return state ;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	e010      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN14:
		state =(uint8)GPIOx->IDR.bits.IDR14;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	73fb      	strb	r3, [r7, #15]
		return state ;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	e008      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	case GPIO_PIN15:
		state =(uint8)GPIOx->IDR.bits.IDR15;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	73fb      	strb	r3, [r7, #15]
		return state ;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	e000      	b.n	800210a <MCAL_GPIO_readPin+0x15e>
	}
	return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <MCAL_GPIO_writePin>:
 * @param [in] 	-PinNumber: Specifies the PIN to be read.
 * @param [in]  -data: Specifies one of @ref GPIO_PIN_STATE_define to be written.
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_writePin(GPIO_typedef * GPIOx,uint8 PinNumber,uint8 data ){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
 8002120:	4613      	mov	r3, r2
 8002122:	70bb      	strb	r3, [r7, #2]
	switch(PinNumber){
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f200 81b3 	bhi.w	8002492 <MCAL_GPIO_writePin+0x37e>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <MCAL_GPIO_writePin+0x20>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002175 	.word	0x08002175
 8002138:	080021a7 	.word	0x080021a7
 800213c:	080021d9 	.word	0x080021d9
 8002140:	0800220b 	.word	0x0800220b
 8002144:	0800223d 	.word	0x0800223d
 8002148:	0800226f 	.word	0x0800226f
 800214c:	080022a1 	.word	0x080022a1
 8002150:	080022d3 	.word	0x080022d3
 8002154:	08002305 	.word	0x08002305
 8002158:	08002337 	.word	0x08002337
 800215c:	08002369 	.word	0x08002369
 8002160:	08002399 	.word	0x08002399
 8002164:	080023cb 	.word	0x080023cb
 8002168:	080023fd 	.word	0x080023fd
 800216c:	0800242f 	.word	0x0800242f
 8002170:	08002461 	.word	0x08002461
	case GPIO_PIN0:
		if(data){
 8002174:	78bb      	ldrb	r3, [r7, #2]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <MCAL_GPIO_writePin+0x7c>
			GPIOx->BRR.bits.BR0  = 0b0;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6953      	ldr	r3, [r2, #20]
 800217e:	f36f 0300 	bfc	r3, #0, #1
 8002182:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS0 = 0b1 ;
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6913      	ldr	r3, [r2, #16]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS0 = 0b0 ;
			GPIOx->BRR.bits.BR0  = 0b1 ;
		}
		break;
 800218e:	e180      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS0 = 0b0 ;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6913      	ldr	r3, [r2, #16]
 8002194:	f36f 0300 	bfc	r3, #0, #1
 8002198:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR0  = 0b1 ;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6953      	ldr	r3, [r2, #20]
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6153      	str	r3, [r2, #20]
		break;
 80021a4:	e175      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN1:
		if(data){
 80021a6:	78bb      	ldrb	r3, [r7, #2]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <MCAL_GPIO_writePin+0xae>
			GPIOx->BRR.bits.BR1  = 0b0;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6953      	ldr	r3, [r2, #20]
 80021b0:	f36f 0341 	bfc	r3, #1, #1
 80021b4:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS1 = 0b1 ;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6913      	ldr	r3, [r2, #16]
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS1 = 0b0 ;
			GPIOx->BRR.bits.BR1  = 0b1 ;
		}
		break;
 80021c0:	e167      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS1 = 0b0 ;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6913      	ldr	r3, [r2, #16]
 80021c6:	f36f 0341 	bfc	r3, #1, #1
 80021ca:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR1  = 0b1 ;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6953      	ldr	r3, [r2, #20]
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6153      	str	r3, [r2, #20]
		break;
 80021d6:	e15c      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN2:
		if(data){
 80021d8:	78bb      	ldrb	r3, [r7, #2]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <MCAL_GPIO_writePin+0xe0>
			GPIOx->BRR.bits.BR2  = 0b0;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6953      	ldr	r3, [r2, #20]
 80021e2:	f36f 0382 	bfc	r3, #2, #1
 80021e6:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS2 = 0b1 ;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6913      	ldr	r3, [r2, #16]
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS2 = 0b0 ;
			GPIOx->BRR.bits.BR2  = 0b1 ;
		}
		break;
 80021f2:	e14e      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS2 = 0b0 ;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6913      	ldr	r3, [r2, #16]
 80021f8:	f36f 0382 	bfc	r3, #2, #1
 80021fc:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR2  = 0b1 ;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6953      	ldr	r3, [r2, #20]
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6153      	str	r3, [r2, #20]
		break;
 8002208:	e143      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN3:
		if(data){
 800220a:	78bb      	ldrb	r3, [r7, #2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <MCAL_GPIO_writePin+0x112>
			GPIOx->BRR.bits.BR3  = 0b0;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6953      	ldr	r3, [r2, #20]
 8002214:	f36f 03c3 	bfc	r3, #3, #1
 8002218:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS3 = 0b1 ;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6913      	ldr	r3, [r2, #16]
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS3 = 0b0 ;
			GPIOx->BRR.bits.BR3  = 0b1 ;
		}
		break;
 8002224:	e135      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS3 = 0b0 ;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6913      	ldr	r3, [r2, #16]
 800222a:	f36f 03c3 	bfc	r3, #3, #1
 800222e:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR3  = 0b1 ;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6953      	ldr	r3, [r2, #20]
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	6153      	str	r3, [r2, #20]
		break;
 800223a:	e12a      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN4:
		if(data){
 800223c:	78bb      	ldrb	r3, [r7, #2]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <MCAL_GPIO_writePin+0x144>
			GPIOx->BRR.bits.BR4  = 0b0;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6953      	ldr	r3, [r2, #20]
 8002246:	f36f 1304 	bfc	r3, #4, #1
 800224a:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS4 = 0b1 ;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6913      	ldr	r3, [r2, #16]
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS4 = 0b0 ;
			GPIOx->BRR.bits.BR4  = 0b1 ;
		}
		break;
 8002256:	e11c      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS4 = 0b0 ;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6913      	ldr	r3, [r2, #16]
 800225c:	f36f 1304 	bfc	r3, #4, #1
 8002260:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR4  = 0b1 ;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6953      	ldr	r3, [r2, #20]
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6153      	str	r3, [r2, #20]
		break;
 800226c:	e111      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN5:
		if(data){
 800226e:	78bb      	ldrb	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <MCAL_GPIO_writePin+0x176>
			GPIOx->BRR.bits.BR5  = 0b0;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6953      	ldr	r3, [r2, #20]
 8002278:	f36f 1345 	bfc	r3, #5, #1
 800227c:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS5 = 0b1 ;
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6913      	ldr	r3, [r2, #16]
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS5 = 0b0 ;
			GPIOx->BRR.bits.BR5  = 0b1 ;
		}
		break;
 8002288:	e103      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS5 = 0b0 ;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6913      	ldr	r3, [r2, #16]
 800228e:	f36f 1345 	bfc	r3, #5, #1
 8002292:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR5  = 0b1 ;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6953      	ldr	r3, [r2, #20]
 8002298:	f043 0320 	orr.w	r3, r3, #32
 800229c:	6153      	str	r3, [r2, #20]
		break;
 800229e:	e0f8      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN6:
		if(data){
 80022a0:	78bb      	ldrb	r3, [r7, #2]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <MCAL_GPIO_writePin+0x1a8>
			GPIOx->BRR.bits.BR6  = 0b0;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6953      	ldr	r3, [r2, #20]
 80022aa:	f36f 1386 	bfc	r3, #6, #1
 80022ae:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS6 = 0b1 ;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6913      	ldr	r3, [r2, #16]
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS6 = 0b0 ;
			GPIOx->BRR.bits.BR6  = 0b1 ;
		}
		break;
 80022ba:	e0ea      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS6 = 0b0 ;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6913      	ldr	r3, [r2, #16]
 80022c0:	f36f 1386 	bfc	r3, #6, #1
 80022c4:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR6  = 0b1 ;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6953      	ldr	r3, [r2, #20]
 80022ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ce:	6153      	str	r3, [r2, #20]
		break;
 80022d0:	e0df      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN7:
		if(data){
 80022d2:	78bb      	ldrb	r3, [r7, #2]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <MCAL_GPIO_writePin+0x1da>
			GPIOx->BRR.bits.BR7  = 0b0;
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6953      	ldr	r3, [r2, #20]
 80022dc:	f36f 13c7 	bfc	r3, #7, #1
 80022e0:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS7 = 0b1 ;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6913      	ldr	r3, [r2, #16]
 80022e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ea:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS7 = 0b0 ;
			GPIOx->BRR.bits.BR7  = 0b1 ;
		}
		break;
 80022ec:	e0d1      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS7 = 0b0 ;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6913      	ldr	r3, [r2, #16]
 80022f2:	f36f 13c7 	bfc	r3, #7, #1
 80022f6:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR7  = 0b1 ;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6953      	ldr	r3, [r2, #20]
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6153      	str	r3, [r2, #20]
		break;
 8002302:	e0c6      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN8:
		if(data){
 8002304:	78bb      	ldrb	r3, [r7, #2]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <MCAL_GPIO_writePin+0x20c>
			GPIOx->BRR.bits.BR8  = 0b0;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6953      	ldr	r3, [r2, #20]
 800230e:	f36f 2308 	bfc	r3, #8, #1
 8002312:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS8 = 0b1 ;
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6913      	ldr	r3, [r2, #16]
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS8 = 0b0 ;
			GPIOx->BRR.bits.BR8  = 0b1 ;
		}
		break;
 800231e:	e0b8      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS8 = 0b0 ;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6913      	ldr	r3, [r2, #16]
 8002324:	f36f 2308 	bfc	r3, #8, #1
 8002328:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR8  = 0b1 ;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6953      	ldr	r3, [r2, #20]
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6153      	str	r3, [r2, #20]
		break;
 8002334:	e0ad      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN9:
		if(data){
 8002336:	78bb      	ldrb	r3, [r7, #2]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <MCAL_GPIO_writePin+0x23e>
			GPIOx->BRR.bits.BR9  = 0b0;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6953      	ldr	r3, [r2, #20]
 8002340:	f36f 2349 	bfc	r3, #9, #1
 8002344:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS9 = 0b1 ;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6913      	ldr	r3, [r2, #16]
 800234a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234e:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS9 = 0b0 ;
			GPIOx->BRR.bits.BR9  = 0b1 ;
		}
		break;
 8002350:	e09f      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS9 = 0b0 ;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6913      	ldr	r3, [r2, #16]
 8002356:	f36f 2349 	bfc	r3, #9, #1
 800235a:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR9  = 0b1 ;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6953      	ldr	r3, [r2, #20]
 8002360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002364:	6153      	str	r3, [r2, #20]
		break;
 8002366:	e094      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN10:
		if(data){
 8002368:	78bb      	ldrb	r3, [r7, #2]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <MCAL_GPIO_writePin+0x270>
			GPIOx->BRR.bits.BR10  = 0b0;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6953      	ldr	r3, [r2, #20]
 8002372:	f36f 238a 	bfc	r3, #10, #1
 8002376:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS10 = 0b1 ;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6913      	ldr	r3, [r2, #16]
 800237c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002380:	6113      	str	r3, [r2, #16]
 8002382:	e009      	b.n	8002398 <MCAL_GPIO_writePin+0x284>
		}else{
			GPIOx->BSRR.bits.BS10 = 0b0 ;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6913      	ldr	r3, [r2, #16]
 8002388:	f36f 238a 	bfc	r3, #10, #1
 800238c:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR10  = 0b1 ;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6953      	ldr	r3, [r2, #20]
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	6153      	str	r3, [r2, #20]
		}
	case GPIO_PIN11:
		if(data){
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <MCAL_GPIO_writePin+0x2a0>
			GPIOx->BRR.bits.BR11  = 0b0;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6953      	ldr	r3, [r2, #20]
 80023a2:	f36f 23cb 	bfc	r3, #11, #1
 80023a6:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS11 = 0b1 ;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6913      	ldr	r3, [r2, #16]
 80023ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b0:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS11 = 0b0 ;
			GPIOx->BRR.bits.BR11  = 0b1 ;
		}
		break;
 80023b2:	e06e      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS11 = 0b0 ;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6913      	ldr	r3, [r2, #16]
 80023b8:	f36f 23cb 	bfc	r3, #11, #1
 80023bc:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR11  = 0b1 ;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6953      	ldr	r3, [r2, #20]
 80023c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023c6:	6153      	str	r3, [r2, #20]
		break;
 80023c8:	e063      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN12:
		if(data){
 80023ca:	78bb      	ldrb	r3, [r7, #2]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <MCAL_GPIO_writePin+0x2d2>
			GPIOx->BRR.bits.BR12  = 0b0;
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6953      	ldr	r3, [r2, #20]
 80023d4:	f36f 330c 	bfc	r3, #12, #1
 80023d8:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS12 = 0b1 ;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6913      	ldr	r3, [r2, #16]
 80023de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023e2:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS12 = 0b0 ;
			GPIOx->BRR.bits.BR12  = 0b1 ;
		}
		break;
 80023e4:	e055      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS12 = 0b0 ;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6913      	ldr	r3, [r2, #16]
 80023ea:	f36f 330c 	bfc	r3, #12, #1
 80023ee:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR12  = 0b1 ;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6953      	ldr	r3, [r2, #20]
 80023f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023f8:	6153      	str	r3, [r2, #20]
		break;
 80023fa:	e04a      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN13:
		if(data){
 80023fc:	78bb      	ldrb	r3, [r7, #2]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <MCAL_GPIO_writePin+0x304>
			GPIOx->BRR.bits.BR13  = 0b0;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6953      	ldr	r3, [r2, #20]
 8002406:	f36f 334d 	bfc	r3, #13, #1
 800240a:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS13 = 0b1 ;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6913      	ldr	r3, [r2, #16]
 8002410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002414:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS13 = 0b0 ;
			GPIOx->BRR.bits.BR13  = 0b1 ;
		}
		break;
 8002416:	e03c      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS13 = 0b0 ;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6913      	ldr	r3, [r2, #16]
 800241c:	f36f 334d 	bfc	r3, #13, #1
 8002420:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR13  = 0b1 ;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6953      	ldr	r3, [r2, #20]
 8002426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800242a:	6153      	str	r3, [r2, #20]
		break;
 800242c:	e031      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN14:
		if(data){
 800242e:	78bb      	ldrb	r3, [r7, #2]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <MCAL_GPIO_writePin+0x336>
			GPIOx->BRR.bits.BR14  = 0b0;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6953      	ldr	r3, [r2, #20]
 8002438:	f36f 338e 	bfc	r3, #14, #1
 800243c:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS14 = 0b1 ;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6913      	ldr	r3, [r2, #16]
 8002442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002446:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS14 = 0b0 ;
			GPIOx->BRR.bits.BR14  = 0b1 ;
		}
		break;
 8002448:	e023      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
			GPIOx->BSRR.bits.BS14 = 0b0 ;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6913      	ldr	r3, [r2, #16]
 800244e:	f36f 338e 	bfc	r3, #14, #1
 8002452:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR14  = 0b1 ;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6953      	ldr	r3, [r2, #20]
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6153      	str	r3, [r2, #20]
		break;
 800245e:	e018      	b.n	8002492 <MCAL_GPIO_writePin+0x37e>
	case GPIO_PIN15:
		if(data){
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <MCAL_GPIO_writePin+0x368>
			GPIOx->BRR.bits.BR15  = 0b0;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6953      	ldr	r3, [r2, #20]
 800246a:	f36f 33cf 	bfc	r3, #15, #1
 800246e:	6153      	str	r3, [r2, #20]
			GPIOx->BSRR.bits.BS15 = 0b1 ;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6913      	ldr	r3, [r2, #16]
 8002474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002478:	6113      	str	r3, [r2, #16]
		}else{
			GPIOx->BSRR.bits.BS15 = 0b0 ;
			GPIOx->BRR.bits.BR15  = 0b1 ;
		}
		break;
 800247a:	e009      	b.n	8002490 <MCAL_GPIO_writePin+0x37c>
			GPIOx->BSRR.bits.BS15 = 0b0 ;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6913      	ldr	r3, [r2, #16]
 8002480:	f36f 33cf 	bfc	r3, #15, #1
 8002484:	6113      	str	r3, [r2, #16]
			GPIOx->BRR.bits.BR15  = 0b1 ;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6953      	ldr	r3, [r2, #20]
 800248a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248e:	6153      	str	r3, [r2, #20]
		break;
 8002490:	bf00      	nop
	}



}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <MCAL_GPIO_writePort>:
 * @param [in] 	-GPIOx: x can be (A...E) to select the GPIO peripheral.
 * @param [in] 	-data: Specifies the data to be written.
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_writePort(GPIO_typedef * GPIOx,uint16 data ){
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
	uint32 i;
	for(i=0;i<16;i++){
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e01b      	b.n	80024e6 <MCAL_GPIO_writePort+0x4a>
		if((data &((uint16)(1<<i)))){
 80024ae:	2201      	movs	r2, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <MCAL_GPIO_writePort+0x36>
			MCAL_GPIO_writePin(GPIOx, i, GPIO_HIGH);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2201      	movs	r2, #1
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fe22 	bl	8002114 <MCAL_GPIO_writePin>
 80024d0:	e006      	b.n	80024e0 <MCAL_GPIO_writePort+0x44>
		}
		else{
			MCAL_GPIO_writePin(GPIOx, i, GPIO_LOW);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe1a 	bl	8002114 <MCAL_GPIO_writePin>
	for(i=0;i<16;i++){
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d9e0      	bls.n	80024ae <MCAL_GPIO_writePort+0x12>
		}
	}
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <IRQ0_Handler>:
#include "LCD.h"
#include "Keypad.h"
#include "7segment.h"
#include "stm32f103c6_exti_driver.h"

void IRQ0_Handler(void){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0

	LCD_printString("IRQ_9 Has Happened");
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <IRQ0_Handler+0x14>)
 80024fa:	f7fe f84f 	bl	800059c <LCD_printString>
	delay(150);
 80024fe:	2096      	movs	r0, #150	; 0x96
 8002500:	f7fd ff22 	bl	8000348 <delay>
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	08002664 	.word	0x08002664

0800250c <clockInit>:


void clockInit(void){
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <clockInit+0x2c>)
 8002512:	6993      	ldr	r3, [r2, #24]
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800251a:	4a07      	ldr	r2, [pc, #28]	; (8002538 <clockInit+0x2c>)
 800251c:	6993      	ldr	r3, [r2, #24]
 800251e:	f043 0308 	orr.w	r3, r3, #8
 8002522:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <clockInit+0x2c>)
 8002526:	6993      	ldr	r3, [r2, #24]
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6193      	str	r3, [r2, #24]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000

0800253c <main>:

int main(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
	EXTI_config cfg;
	clockInit();
 8002542:	f7ff ffe3 	bl	800250c <clockInit>
	LCD_init();
 8002546:	f7fd ffb3 	bl	80004b0 <LCD_init>
	KEYPAD_init();
 800254a:	f7fd fe11 	bl	8000170 <KEYPAD_init>


	cfg.EXTI_Map		 = EXTI9PB9;
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <main+0x68>)
 8002550:	463b      	mov	r3, r7
 8002552:	ca07      	ldmia	r2, {r0, r1, r2}
 8002554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	cfg.EXTI_Trigger	 = EXTI_RISING;
 8002558:	2301      	movs	r3, #1
 800255a:	733b      	strb	r3, [r7, #12]
	cfg.EXTI_EnableState = EXTI_ENABLE;
 800255c:	2301      	movs	r3, #1
 800255e:	737b      	strb	r3, [r7, #13]
	cfg.P_IRQHandler	 = IRQ0_Handler;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <main+0x6c>)
 8002562:	613b      	str	r3, [r7, #16]
	MCAL_EXTI_init(&cfg);
 8002564:	463b      	mov	r3, r7
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f9f4 	bl	8000954 <MCAL_EXTI_init>

	char data;
	LCD_printString("Hello");
 800256c:	480f      	ldr	r0, [pc, #60]	; (80025ac <main+0x70>)
 800256e:	f7fe f815 	bl	800059c <LCD_printString>
	delay(300);
 8002572:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002576:	f7fd fee7 	bl	8000348 <delay>
	LCD_clearScreen();
 800257a:	f7fd ff8d 	bl	8000498 <LCD_clearScreen>

	while(1){

		data = KEYPAD_getChar();
 800257e:	f7fd fe2f 	bl	80001e0 <KEYPAD_getChar>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]
		switch(data){
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <main+0x64>
 800258c:	2b21      	cmp	r3, #33	; 0x21
 800258e:	d102      	bne.n	8002596 <main+0x5a>
		case '!':
			LCD_clearScreen();
 8002590:	f7fd ff82 	bl	8000498 <LCD_clearScreen>
			break;
 8002594:	e005      	b.n	80025a2 <main+0x66>
		case '\0':
			break;
		default:
			LCD_printChar(data);
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffc5 	bl	8000528 <LCD_printChar>
 800259e:	e7ee      	b.n	800257e <main+0x42>
			break;
 80025a0:	bf00      	nop
		data = KEYPAD_getChar();
 80025a2:	e7ec      	b.n	800257e <main+0x42>
 80025a4:	08002680 	.word	0x08002680
 80025a8:	080024f5 	.word	0x080024f5
 80025ac:	08002678 	.word	0x08002678

080025b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <LoopForever+0x6>)
  ldr r1, =_edata
 80025ba:	490d      	ldr	r1, [pc, #52]	; (80025f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <LoopForever+0xe>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c0:	e002      	b.n	80025c8 <LoopCopyDataInit>

080025c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c6:	3304      	adds	r3, #4

080025c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025cc:	d3f9      	bcc.n	80025c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025d0:	4c0a      	ldr	r4, [pc, #40]	; (80025fc <LoopForever+0x16>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d4:	e001      	b.n	80025da <LoopFillZerobss>

080025d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d8:	3204      	adds	r2, #4

080025da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025dc:	d3fb      	bcc.n	80025d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025de:	f000 f811 	bl	8002604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e2:	f7ff ffab 	bl	800253c <main>

080025e6 <LoopForever>:

LoopForever:
    b LoopForever
 80025e6:	e7fe      	b.n	80025e6 <LoopForever>
  ldr   r0, =_estack
 80025e8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80025f4:	08002694 	.word	0x08002694
  ldr r2, =_sbss
 80025f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80025fc:	20000078 	.word	0x20000078

08002600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC1_2_IRQHandler>
	...

08002604 <__libc_init_array>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	2500      	movs	r5, #0
 8002608:	4e0c      	ldr	r6, [pc, #48]	; (800263c <__libc_init_array+0x38>)
 800260a:	4c0d      	ldr	r4, [pc, #52]	; (8002640 <__libc_init_array+0x3c>)
 800260c:	1ba4      	subs	r4, r4, r6
 800260e:	10a4      	asrs	r4, r4, #2
 8002610:	42a5      	cmp	r5, r4
 8002612:	d109      	bne.n	8002628 <__libc_init_array+0x24>
 8002614:	f000 f81a 	bl	800264c <_init>
 8002618:	2500      	movs	r5, #0
 800261a:	4e0a      	ldr	r6, [pc, #40]	; (8002644 <__libc_init_array+0x40>)
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <__libc_init_array+0x44>)
 800261e:	1ba4      	subs	r4, r4, r6
 8002620:	10a4      	asrs	r4, r4, #2
 8002622:	42a5      	cmp	r5, r4
 8002624:	d105      	bne.n	8002632 <__libc_init_array+0x2e>
 8002626:	bd70      	pop	{r4, r5, r6, pc}
 8002628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800262c:	4798      	blx	r3
 800262e:	3501      	adds	r5, #1
 8002630:	e7ee      	b.n	8002610 <__libc_init_array+0xc>
 8002632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002636:	4798      	blx	r3
 8002638:	3501      	adds	r5, #1
 800263a:	e7f2      	b.n	8002622 <__libc_init_array+0x1e>
 800263c:	0800268c 	.word	0x0800268c
 8002640:	0800268c 	.word	0x0800268c
 8002644:	0800268c 	.word	0x0800268c
 8002648:	08002690 	.word	0x08002690

0800264c <_init>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	bf00      	nop
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr

08002658 <_fini>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	bf00      	nop
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr
